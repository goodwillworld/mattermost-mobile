workflows:
  ios-mattermost-release:
    name: Mattermost iOS (App Groups + Push, no Expo)
    instance_type: mac_mini_m2
    max_build_duration: 60

    environment:
      groups:
        - ios_match
      vars:
        APP_NAME: "Mattermost"
        MAIN_BUNDLE_ID: "com.jboth.mine"
        SHARE_BUNDLE_ID: "com.jboth.mine.MattermostShare"
        NOTI_BUNDLE_ID: "com.jboth.mine.NotificationService"
        APP_GROUP_ID: "group.com.jboth.mine"
        TEAM_ID: "866Y22894T"   # 可选：填你的 10 位 Team ID，用于强制写入 DEVELOPMENT_TEAM
        CI: "true"
      ios_signing:
        # TestFlight 用 app_store；若需 Ad Hoc，将此处与下方 export_options 的 method 同步改为 ad_hoc / ad-hoc
        distribution_type: app_store
        bundle_identifier: com.jboth.mine

    scripts:
      - name: Print Xcode / Ruby / CocoaPods versions
        script: |
          set -e
          xcodebuild -version
          ruby -v
          pod --version

      - name: Use Node 20 LTS (via nvm，无 nvm 时自动回退)
        script: |
          set -euo pipefail
          export NVM_DIR="$HOME/.nvm"
          if [ -s "$NVM_DIR/nvm.sh" ]; then
            . "$NVM_DIR/nvm.sh"
            nvm install 20
            nvm use 20
            # 持久化到后续步骤
            echo 'export NVM_DIR="$HOME/.nvm"' >> $CM_ENV
            echo '. "$NVM_DIR/nvm.sh" && nvm use 20 >/dev/null' >> $CM_ENV
          else
            echo "nvm not found, fallback to Homebrew node@20"
            brew update || true
            brew install node@20 || true
            export PATH="/opt/homebrew/opt/node@20/bin:$PATH"
            echo 'export PATH="/opt/homebrew/opt/node@20/bin:$PATH"' >> $CM_ENV
          fi
          node -v
          npm -v || true
          yarn -v || true

      - name: Install JS deps (project root)
        script: |
          set -e
          yarn install --frozen-lockfile || npm ci

      - name: Patch Podfile resolver (point to project root, no heredoc)
        script: |
          set -euo pipefail
          PODFILE="ios/Podfile"
          if [ -f "$PODFILE" ]; then
            if grep -q "require Pod::Executable.execute_command('node', \['-p'" "$PODFILE"; then
              perl -0777 -i -pe "s/require Pod::Executable.execute_command\(\s*'node'.*?\)\s*\]/react_native_pods = Pod::Executable.execute_command(\n  'node',\n  [\n    '-p',\n    <<~'NODE',\n      require.resolve(\n        'react-native\/scripts\/react_native_pods.rb',\n        { paths: [process.argv[1]] },\n      )\n    NODE,\n    Pod::Config.instance.project_root.to_s\n  ]\n)\nrequire react_native_pods/s" "$PODFILE"
              echo "Patched Podfile resolver to use project_root"
            else
              echo "Podfile resolver already modernized or not matching; skip."
            fi
          else
            echo "Podfile not found at ios/Podfile"
          fi

      - name: Trim setup_signing.sh to skip early profile matching
        script: |
          set -euo pipefail
          if [ ! -f scripts/setup_signing.sh ]; then
            echo "scripts/setup_signing.sh not found"
            exit 1
          fi
          # 删除从标记行开始到文件结尾（即剥离“==> Resolving provisioning profiles for targets”及其后续代码）
          awk 'BEGIN{p=1} /^==> Resolving provisioning profiles for targets/{p=0} { if(p) print }' \
            scripts/setup_signing.sh > scripts/setup_signing_trimmed.sh
          mv scripts/setup_signing_trimmed.sh scripts/setup_signing.sh
          chmod +x scripts/setup_signing.sh

      - name: Run setup_signing.sh (from repo)
        script: |
          set -euo pipefail
          if [ ! -x scripts/setup_signing.sh ]; then
            echo "scripts/setup_signing.sh not found or not executable"
            exit 1
          fi
          bash scripts/setup_signing.sh

      - name: Install pods
        script: |
          set -e
          cd ios
          pod repo update || true
          pod install --repo-update

      - name: Apply provisioning profiles to Xcode project
        script: |
          set -e
          # 仅作用于主工程，避免 node_modules 的子工程被误改
          xcode-project use-profiles --project ios/Mattermost.xcodeproj

      - name: List installed provisioning profiles
        script: |
          set -e
          echo "==> Profiles in runner:"
          ls -l "$HOME/Library/MobileDevice/Provisioning Profiles" || true


      - name: Run apply_profiles.sh
        script: |
          set -euo pipefail
          if [ ! -x scripts/apply_profiles.sh ]; then
            echo "scripts/apply_profiles.sh not found or not executable"
            exit 1
          fi
          bash scripts/apply_profiles.sh


      - name: Show build signing for each target
        script: |
          set -e
          for T in Mattermost MattermostShare NotificationService; do
            echo "---- $T ----"
            xcodebuild -workspace ios/Mattermost.xcworkspace -scheme Mattermost -showBuildSettings \
              | grep -E "PRODUCT_BUNDLE_IDENTIFIER|PROVISIONING_PROFILE_SPECIFIER|DEVELOPMENT_TEAM|CODE_SIGN_ENTITLEMENTS" -n \
              | sed -E "s/^/$T: /" || true
          done

      - name: Generate export options (App Store)
        script: |
          set -e
          # 若需 Ad Hoc，请把 method 改为 ad-hoc，并与上方 distribution_type 同步
          cat > export_options.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>destination</key><string>export</string>
            <key>compileBitcode</key><false/>
          </dict>
          </plist>
          EOF

      - name: Build archive
        script: |
          set -e
          cd ios
          xcodebuild -workspace Mattermost.xcworkspace \
            -scheme Mattermost \
            -configuration Release \
            -archivePath build/ios/xcarchive/Mattermost.xcarchive \
            CODE_SIGN_STYLE=Manual \
            COMPILER_INDEX_STORE_ENABLE=NO \
            archive | xcpretty && exit ${PIPESTATUS[0]}

      - name: Export IPA
        script: |
          set -e
          cd ios
          xcodebuild -exportArchive \
            -archivePath build/ios/xcarchive/Mattermost.xcarchive \
            -exportPath ipa \
            -exportOptionsPlist ../export_options.plist | xcpretty && exit ${PIPESTATUS[0]}

    artifacts:
      - ios/ipa/*.ipa
      - ios/build/**/*.xcarchive

    publishing:
      app_store_connect:
        api_key: "$APP_STORE_CONNECT_PRIVATE_KEY"
        key_id: "$APP_STORE_CONNECT_KEY_ID"
        issuer_id: "$APP_STORE_CONNECT_ISSUER_ID"
        submit_to_testflight: true
      email:
        recipients:
          - bill.fan4java@gmail.com
