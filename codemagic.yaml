workflows:
  mm-whitelabel-android-sideload:
    name: Mattermost WhiteLabel ANDROID (sideload)
    max_build_duration: 120
    instance_type: linux_x2
    environment:
      android_signing:
        - jboth_android_keystore_ref
      groups:
        - mm_common
        - jboth_client
      vars:
        BUILD_FOR_RELEASE: "true"
        ANDROID_BUILD_TASK: assemble
        REPLACE_ASSETS: "true"
    cache:
      cache_paths:
        - $HOME/.gradle/caches
        - node_modules
    scripts:
      - name: Node 环境与依赖
        script: |
          set -e
          export NVM_DIR="$HOME/.nvm"
          if [ -f ".nvmrc" ] && [ -s "$NVM_DIR/nvm.sh" ]; then
            . "$NVM_DIR/nvm.sh"
            nvm install --silent
            nvm use --silent
          else
            echo "⚠️ 未检测到 nvm，使用系统 Node"
            which node || true
            node -v || true
            npm -v || true
          fi
          npm ci
      - name: 注入签名（Gradle）
        script: |
          mkdir -p $HOME/.gradle
          cat >> $HOME/.gradle/gradle.properties <<EOF
          MATTERMOST_RELEASE_STORE_FILE=$CM_KEYSTORE_PATH
          MATTERMOST_RELEASE_KEY_ALIAS=$CM_KEY_ALIAS
          MATTERMOST_RELEASE_PASSWORD=$CM_KEY_PASSWORD
          EOF
      - name: 写入/兜底默认服务器配置（如仓库中已存在将不会覆盖）
        script: |
          set -e
          mkdir -p assets/override
          CFG=assets/override/config.json
          if [ ! -f "$CFG" ]; then
            cat > "$CFG" <<'JSON'
          {
            "DefaultServerUrl": "https://hello.jboth.com",
            "AutoSelectServerUrl": true
          }
          JSON
            echo "Created $CFG with default server URL."
          else
            echo "Found existing $CFG, keep your repo version."
          fi
      - name: 白标变量确认
        script: |
          echo "APP_NAME=$APP_NAME"
          echo "MAIN_APP_IDENTIFIER=$MAIN_APP_IDENTIFIER"
          echo "APP_SCHEME=$APP_SCHEME"
      - name: 构建（优先使用仓库自带 lane）
        script: |
          set -e
          npm run build:android || echo "lane 构建失败，尝试 Gradle 兜底…"
      - name: 兜底：直接 Gradle 生成 APK（如 lane 只产出 AAB）
        script: |
          set -e
          cd android
          ./gradlew assembleRelease             -Pandroid.injected.signing.store.file="$CM_KEYSTORE_PATH"             -Pandroid.injected.signing.store.password="$CM_KEY_PASSWORD"             -Pandroid.injected.signing.key.alias="$CM_KEY_ALIAS"             -Pandroid.injected.signing.key.password="$CM_KEY_PASSWORD" || true
          cd -
      - name: 收集制品（APK/AAB）
        script: |
          mkdir -p $CM_ARTIFACTS
          find . -type f -name "*release*.apk" -maxdepth 6 -print -exec cp -f {} $CM_ARTIFACTS \; || true
          find . -type f -name "*.aab" -maxdepth 6 -print -exec cp -f {} $CM_ARTIFACTS \; || true

  mm-whitelabel-ios:
    name: Mattermost WhiteLabel iOS (App Store)
    max_build_duration: 120
    instance_type: mac_mini_m2
    environment:
      groups:
        - mm_common
        - jboth_client
        - ios_match
      vars:
        BUILD_FOR_RELEASE: 'true'
        REPLACE_ASSETS: 'true'
        EXPORT_METHOD: app-store
        MATCH_TYPE: appstore
    cache:
      cache_paths:
        - $HOME/Library/Caches/CocoaPods
        - ios/Pods
        - node_modules
    scripts:
      - name: 环境与依赖（Node + watchman + CocoaPods 1.16.1）
        script: |
          set -e
          echo "▶ Node"
          which node || true
          node -v || true
          npm -v || true
          echo "▶ Install watchman"
          if command -v brew >/dev/null 2>&1; then
            eval "$(/opt/homebrew/bin/brew shellenv)" || true
            brew list watchman >/dev/null 2>&1 || brew install watchman
            watchman --version || true
          else
            echo "❌ Homebrew 未找到"; exit 1
          fi
          echo "▶ CocoaPods 1.16.1"
          export GEM_HOME="$HOME/.gem"
          export GEM_PATH="$GEM_HOME"
          export PATH="$GEM_HOME/bin:$PATH"
          gem list -i cocoapods -v 1.16.1 || gem install cocoapods -v 1.16.1 --no-document
          export LANG="${LANG:-en_US.UTF-8}"
          echo "pod path: $(command -v pod || echo 'not found')"
          npm ci
          cd ios
          pod _1.16.1_ install --repo-update
          cd -
      - name: 🔧 Patch Pods project (TurboLogIOSNative module.modulemap hotfix)
        script: |
          set -euo pipefail
          cd ios
          ruby - <<'RUBY'
            require 'xcodeproj'
            proj_path = 'Pods/Pods.xcodeproj'
            proj = Xcodeproj::Project.open(proj_path)
            targets = proj.targets.select { |t| t.name == 'TurboLogIOSNative' }
            if targets.empty?
              puts "ℹ️ Target TurboLogIOSNative not found, skipping"
            else
              targets.each do |t|
                # Remove any *.modulemap from Compile Sources
                phases = []
                phases << (t.respond_to?(:source_build_phase) ? t.source_build_phase : nil)
                phases << (t.respond_to?(:sources_build_phase) ? t.sources_build_phase : nil)
                phases.compact.each do |phase|
                  phase.files_references
                       .select { |fr| (fr.path || '').end_with?('.modulemap') }
                       .each   { |fr| phase.remove_file_reference(fr) }
                end
                # Harden build settings
                t.build_configurations.each do |cfg|
                  cfg.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = '*/module.modulemap *.modulemap'
                  cfg.build_settings['MODULEMAP_FILE'] = '$(SRCROOT)/TurboLogIOSNative/Sources/TurboLogSwift/module.modulemap'
                  cfg.build_settings['DEFINES_MODULE'] = 'YES'
                end
              end
              proj.save
              puts "✅ Patched TurboLogIOSNative in Pods.xcodeproj"
            end
          RUBY
          cd -
      - name: 生成 ASC API Key（供 match/gym 使用）
        script: |
          set -e
          python3 - <<'PY'
          import os, json
          data = {
            "key_id": os.environ["ASC_KEY_ID"].strip(),
            "issuer_id": os.environ["ASC_ISSUER_ID"].strip(),
            "key": os.environ["ASC_PRIVATE_KEY"].replace("\r\n", "\n").replace("\r", "\n"),
            "in_house": False
          }
          open("asc_api_key.json","w").write(json.dumps(data))
          PY
          python3 -m json.tool asc_api_key.json >/dev/null 2>&1 || { echo "asc_api_key.json invalid"; exit 1; }
      - name: 配置证书库（HTTPS + Token）并写入后续步骤环境
        script: |
          set -e
          if [ -z "${GITHUB_PAT:-}" ]; then echo '❌ 缺少 GITHUB_PAT'; exit 1; fi
          URL="https://${GITHUB_PAT}@github.com/goodwillworld/ios-certs.git"
          git -c credential.helper= ls-remote "$URL" >/dev/null
          echo "MATCH_GIT_URL=$URL" >> "$CM_ENV"
          echo "SIGH_GIT_URL=$URL" >> "$CM_ENV"
          echo "✅ match 证书库可访问，并已写入环境"
      - name: 自检关键变量（不会泄露）
        script: |
          set -e
          need() { if [ -z "${!1:-}" ]; then echo "❌ MISSING $1"; exit 1; else echo "✅ $1 OK"; fi; }
          need FASTLANE_TEAM_ID
          need MATCH_USERNAME
          need MATCH_PASSWORD
          need MATCH_APP_IDENTIFIER
          need MATCH_TYPE
          need ASC_KEY_ID
          need ASC_ISSUER_ID
          if [ -z "${ASC_PRIVATE_KEY:-}" ]; then echo "❌ MISSING ASC_PRIVATE_KEY"; exit 1; else echo "✅ ASC_PRIVATE_KEY OK (hidden)"; fi
      - name: 构建 iOS（使用仓库 lane）
        script: |
          set -e
          npm run build:ios
      - name: 收集制品
        script: |
          set -e
          mkdir -p "$CM_ARTIFACTS"
          find . -type f -name "*.ipa" -maxdepth 6 -print -exec cp -f {} "$CM_ARTIFACTS" \; || true
    publishing:
      app_store_connect:
        api_key: $ASC_PRIVATE_KEY
        key_id: $ASC_KEY_ID
        issuer_id: $ASC_ISSUER_ID
        submit_to_testflight: true
