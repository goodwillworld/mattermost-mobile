workflows:
  ios-mattermost-release:
    name: "Mattermost iOS (App Groups + Push)"
    instance_type: mac_mini_m2
    max_build_duration: 60

    environment:
      groups:
        - ios_match
      vars:
        APP_NAME: "Mattermost"
        MAIN_BUNDLE_ID: "com.jboth.mine"
        SHARE_BUNDLE_ID: "com.jboth.mine.MattermostShare"
        NOTI_BUNDLE_ID: "com.jboth.mine.NotificationService"
        APP_GROUP_ID: "group.com.jboth.mine"
        TEAM_ID: "866Y22894T"
        CI: "true"
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.jboth.mine

    scripts:
      - name: "打印工具版本"
        script: |
          set -e
          xcodebuild -version
          ruby -v
          pod --version

      - name: "使用Node 20 LTS"
        script: |
          set -euo pipefail
          export NVM_DIR="$HOME/.nvm"
          if [ -s "$NVM_DIR/nvm.sh" ]; then
            . "$NVM_DIR/nvm.sh"
            nvm install 20
            nvm use 20
            echo 'export NVM_DIR="$HOME/.nvm"' >> $CM_ENV
            echo '. "$NVM_DIR/nvm.sh" && nvm use 20 >/dev/null' >> $CM_ENV
          else
            echo "未找到nvm，回退到Homebrew node@20"
            brew update || true
            brew install node@20 || true
            export PATH="/opt/homebrew/opt/node@20/bin:$PATH"
            echo 'export PATH="/opt/homebrew/opt/node@20/bin:$PATH"' >> $CM_ENV
          fi
          node -v
          npm -v || true
          yarn -v || true

      - name: "安装JS依赖（根目录）"
        script: |
          set -e
          yarn install --frozen-lockfile || npm ci

      - name: "修补Podfile解析器（无heredoc）"
        script: |
          set -euo pipefail
          PODFILE="ios/Podfile"
          if [ -f "$PODFILE" ]; then
            if grep -q "require Pod::Executable.execute_command('node', \['-p'" "$PODFILE"; then
              perl -0777 -i -pe "s/require Pod::Executable.execute_command\(\s*'node'.*?\)\s*\]/react_native_pods = Pod::Executable.execute_command(\n  'node',\n  [\n    '-p',\n    <<~'NODE',\n      require.resolve(\n        'react-native\/scripts\/react_native_pods.rb',\n        { paths: [process.argv[1]] },\n      )\n    NODE,\n    Pod::Config.instance.project_root.to_s\n  ]\n)\nrequire react_native_pods/s" "$PODFILE"
              echo "修补Podfile解析器以使用project_root"
            else
              echo "Podfile解析器已现代化或不匹配，跳过。"
            fi
          else
            echo "在ios/Podfile未找到Podfile"
          fi

      - name: "清理Pods缓存并确保Yoga依赖"
        script: |
          set -euo pipefail
          cd ios
          pod cache clean --all
          rm -rf Pods
          rm -f Podfile.lock
          if [ -f "Podfile" ]; then
            echo "Podfile内容："
            cat Podfile
            if grep -q 'pod "Yoga"' Podfile; then
              echo "Podfile已包含Yoga依赖，跳过追加"
            else
              pod install --repo-update
              if grep -q "Yoga:" Podfile.lock 2>/dev/null; then
                echo "Podfile.lock已包含Yoga（可能由use_react_native!引入），跳过追加"
              else
                if grep -q "target 'Mattermost' do" Podfile; then
                  sed -i '' "/use_expo_modules!/a\\
                      pod \"Yoga\", :path => \"../node_modules/react-native/ReactCommon/yoga\"" Podfile
                  echo "已追加Yoga依赖到target 'Mattermost'块（在use_expo_modules!之后，4空格缩进）"
                else
                  echo "Podfile中未找到target 'Mattermost'，无法追加Yoga依赖"
                  exit 1
                fi
              fi
            fi
            echo "更新后的Podfile内容："
            cat Podfile
            if grep -q 'pod "Yoga"' Podfile || grep -q "Yoga:" Podfile.lock 2>/dev/null; then
              echo "确认Yoga依赖已存在（Podfile或Podfile.lock）"
            else
              echo "Yoga依赖添加失败"
              exit 1
            fi
          else
            echo "未找到Podfile"
            exit 1
          fi
          pod install --repo-update
          echo "已清理Pods缓存并完成pod install"
          echo "Podfile.lock内容："
          cat Podfile.lock 2>/dev/null || echo "Podfile.lock未生成"

      - name: "更新Alamofire到最新版本"
        script: |
          set -e
          cd ios
          sed -i '' 's/pod "Alamofire".*/pod "Alamofire", "~> 5.9.0"/' Podfile
          pod install --repo-update

      - name: "修补Alamofire EventMonitor.swift（备用）"
        script: |
          set -euo pipefail
          FILE="ios/Pods/Alamofire/Source/Features/EventMonitor.swift"
          if [ -f "$FILE" ]; then
            sed -i '' 's/capture of '\''stream'\'' with non-sendable type '\''InputStream'\''/\/\/ 为Swift 6并发修补\nlet streamCopy = stream\nperformEvent { $0.request(request, didProvideInputStream: streamCopy) }/' "$FILE"
            echo "修补Alamofire EventMonitor.swift以避免非Sendable捕获"
          else
            echo "未找到Alamofire EventMonitor.swift，跳过修补"
          fi

      - name: "修补Alamofire SessionDelegate.swift（备用）"
        script: |
          set -euo pipefail
          FILE="ios/Pods/Alamofire/Source/Core/SessionDelegate.swift"
          if [ -f "$FILE" ]; then
            sed -i '' '/let allHeaders = (downloadRequest.response)?.allHeaderFields as? NSDictionary ?? NSDictionary()/s/allHeaders/allHeadersFixed/' "$FILE"
            echo "修补Alamofire SessionDelegate.swift以重命名allHeaders"
          else
            echo "未找到Alamofire SessionDelegate.swift，跳过修补"
          fi

      - name: "修补SecurePDFViewerManager.h以修复NS_ASSUME_NONNULL问题"
        script: |
          set -euo pipefail
          FILE="libraries/@mattermost/secure-pdf-viewer/ios/SecurePDFViewerManager.h"
          if [ -f "$FILE" ]; then
            echo "SecurePDFViewerManager.h内容（修补前）："
            cat "$FILE"
            perl -0777 -i -pe 's/NS_ASSUME_NONNULL_BEGIN\n#import/#import\nNS_ASSUME_NONNULL_BEGIN/' "$FILE"
            echo "已修补SecurePDFViewerManager.h，将#import移到NS_ASSUME_NONNULL_BEGIN之前"
            echo "SecurePDFViewerManager.h内容（修补后）："
            cat "$FILE"
          else
            echo "未找到SecurePDFViewerManager.h，跳过修补"
          fi

      - name: "修补Pods项目以支持Swift并发和Yoga头文件路径"
        script: |
          set -euo pipefail
          if ! ruby -e "require 'xcodeproj'" 2>/dev/null; then
            gem install xcodeproj --no-document
            export GEM_HOME="$HOME/.gem"
            export PATH="$HOME/.gem/bin:$PATH"
            echo 'export GEM_HOME="$HOME/.gem"' >> $CM_ENV
            echo 'export PATH="$HOME/.gem/bin:$PATH"' >> $CM_ENV
          fi

          ruby - <<'RB'
            require 'xcodeproj'
            proj = Xcodeproj::Project.open('ios/Pods/Pods.xcodeproj')
            proj.targets.each do |t|
              next unless ['Alamofire', 'secure-pdf-viewer'].include?(t.name)
              t.build_configurations.each do |cfg|
                bs = cfg.build_settings
                bs['SWIFT_STRICT_CONCURRENCY'] = 'minimal'
                bs['SWIFT_VERSION'] = '5.9'
                if bs['IPHONEOS_DEPLOYMENT_TARGET'].to_s < '16.0'
                  bs['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
                end
                if t.name == 'secure-pdf-viewer'
                  headers = bs['HEADER_SEARCH_PATHS'] || []
                  headers = [headers] unless headers.is_a?(Array)
                  headers << '"$(PODS_ROOT)/Yoga/yoga"'
                  bs['HEADER_SEARCH_PATHS'] = headers.uniq
                end
              end
            end
            proj.save
            puts "已更新Pods项目：Alamofire和secure-pdf-viewer的SWIFT_STRICT_CONCURRENCY=minimal, SWIFT_VERSION=5.9, IPHONEOS_DEPLOYMENT_TARGET=16.0，并为secure-pdf-viewer添加Yoga头文件路径"
          RB

      - name: "项目：设置iOS 16 + Swift 5.9 + 严格并发=minimal（Release）"
        script: |
          set -euo pipefail
          if ! ruby -e "require 'xcodeproj'" 2>/dev/null; then
            gem install xcodeproj --no-document
            export GEM_HOME="$HOME/.gem"
            export PATH="$HOME/.gem/bin:$PATH"
            echo 'export GEM_HOME="$HOME/.gem"' >> $CM_ENV
            echo 'export PATH="$HOME/.gem/bin:$PATH"' >> $CM_ENV
          fi

          ruby - <<'RB'
            require 'xcodeproj'
            proj = Xcodeproj::Project.open('ios/Mattermost.xcodeproj')
            targets = ['Mattermost', 'MattermostShare', 'NotificationService']
            proj.targets.each do |t|
              next unless targets.include?(t.name)
              t.build_configurations.each do |cfg|
                next unless cfg.name == 'Release'
                bs = cfg.build_settings
                bs['SWIFT_VERSION'] = '5.9'
                if bs['IPHONEOS_DEPLOYMENT_TARGET'].to_s < '16.0'
                  bs['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
                end
                bs['SWIFT_STRICT_CONCURRENCY'] = 'minimal'
              end
            end
            proj.save
            puts "已更新项目Release配置。"
          RB

          xcodebuild -project ios/Mattermost.xcodeproj -list

      - name: "提升项目部署目标到iOS 16.0（仅Release）"
        script: |
          set -euo pipefail
          if ! ruby -e "require 'xcodeproj'" 2>/dev/null; then
            gem install xcodeproj --no-document
            export GEM_HOME="$HOME/.gem"
            export PATH="$HOME/.gem/bin:$PATH"
            echo 'export GEM_HOME="$HOME/.gem"' >> $CM_ENV
            echo 'export PATH="$HOME/.gem/bin:$PATH"' >> $CM_ENV
          fi

          ruby - <<'RB'
            require 'xcodeproj'
            proj = Xcodeproj::Project.open('ios/Mattermost.xcodeproj')
            targets = ['Mattermost', 'MattermostShare', 'NotificationService']
            proj.targets.each do |t|
              next unless targets.include?(t.name)
              t.build_configurations.each do |cfg|
                next unless cfg.name == 'Release'
                bs = cfg.build_settings
                if bs['IPHONEOS_DEPLOYMENT_TARGET'].to_s < '16.0'
                  bs['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
                end
              end
            end
            proj.save
            puts "已将Release配置的IPHONEOS_DEPLOYMENT_TARGET提升到16.0。"
          RB

          xcodebuild -project ios/Mattermost.xcodeproj -list

      - name: "必须：物化并验证干净的pbxproj（.clean）"
        script: |
          set -euo pipefail
          SRC="ios/Mattermost.xcodeproj/project.pbxproj.clean"
          DST="ios/Mattermost.xcodeproj/project.pbxproj"
          ls -l "$SRC"
          cp "$SRC" "$DST"
          md5_src=$(md5 -q "$SRC"); md5_dst=$(md5 -q "$DST")
          echo "SRC MD5: $md5_src"; echo "DST MD5: $md5_dst"
          [ "$md5_src" = "$md5_dst" ] || { echo "覆盖失败"; exit 1; }
          cp "$DST" ios/Mattermost.xcodeproj/project.pbxproj.good
          xcodebuild -project ios/Mattermost.xcodeproj -list

      - name: "项目：统一Swift=5.9 + iOS 16.0 + 并发=minimal（所有配置）"
        script: |
          set -euo pipefail
          if ! ruby -e "require 'xcodeproj'" 2>/dev/null; then
            gem install xcodeproj --no-document
            export GEM_HOME="$HOME/.gem"
            export PATH="$HOME/.gem/bin:$PATH"
            echo 'export GEM_HOME="$HOME/.gem"' >> $CM_ENV
            echo 'export PATH="$HOME/.gem/bin:$PATH"' >> $CM_ENV
          fi

          ruby - <<'RB'
            require 'xcodeproj'
            proj = Xcodeproj::Project.open('ios/Mattermost.xcodeproj')
            proj.build_configurations.each do |cfg|
              bs = cfg.build_settings
              bs['SWIFT_VERSION'] = '5.9'
              if bs['IPHONEOS_DEPLOYMENT_TARGET'].to_s < '16.0'
                bs['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
              end
              bs['SWIFT_STRICT_CONCURRENCY'] = 'minimal'
            end
            targets = ['Mattermost', 'MattermostShare', 'NotificationService']
            proj.targets.each do |t|
              next unless targets.include?(t.name)
              t.build_configurations.each do |cfg|
                bs = cfg.build_settings
                bs['SWIFT_VERSION'] = '5.9'
                if bs['IPHONEOS_DEPLOYMENT_TARGET'].to_s < '16.0'
                  bs['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
                end
                bs['SWIFT_STRICT_CONCURRENCY'] = 'minimal'
              end
            end
            proj.save
            puts "已统一所有构建配置的Swift/iOS/并发设置。"
          RB

          xcodebuild -project ios/Mattermost.xcodeproj -list

      - name: "修补Podfile：为Pods添加C++17设置（包括secure-pdf-viewer）"
        script: |
          set -euo pipefail
          P=ios/Podfile
          test -f "$P"
          ruby - <<'RUBY'
            path = 'ios/Podfile'
            s = File.read(path)
            inject = <<~'INJECT'
              # === RN C++ pods需要C++20以支持std::unordered_map::contains等 ===
              react_cpp20_targets = installer.pods_project.targets.select { |t|
                t.name.start_with?('React-') ||
                t.name == 'React-perflogger' || t.name == 'React-Fabric' || t.name == 'React-FabricComponents' || t.name == 'secure-pdf-viewer'
              }
              react_cpp20_targets.each do |t|
                t.build_configurations.each do |cfg|
                  bs = cfg.build_settings
                  bs['CLANG_CXX_LANGUAGE_STANDARD'] = 'gnu++20'
                  flags = Array(bs['OTHER_CPLUSPLUSFLAGS']).map(&:to_s)
                  if flags.any? { |f| f.include?('-std=gnu++17') }
                    flags = flags.map { |f| f.include?('-std=gnu++17') ? '-std=gnu++20' : f }
                  else
                    flags << '-std=gnu++20'
                  end
                  bs['OTHER_CPLUSPLUSFLAGS'] = flags.uniq
                  bs['CLANG_CXX_LIBRARY'] = 'libc++'
                end
              end
            INJECT
            if s =~ /post_install do \|installer\|/m
              s = s.gsub(/post_install do \|installer\|.*?end/m) do |blk|
                blk.include?('react_cpp20_targets') ? blk : blk.sub(/end\s*\z/, inject + "\nend")
              end
            else
              s << <<~POST
                post_install do |installer|
                #{inject}
                end
              POST
            end
            File.write(path, s)
            puts "Podfile post_install更新：React*和secure-pdf-viewer pods使用gnu++20。"
          RUBY

      - name: "安装Pods"
        script: |
          set -e
          cd ios
          pod repo update || true
          pod install --repo-update

      - name: "诊断Pods：详细构建secure-pdf-viewer目标"
        script: |
          set -euo pipefail
          xcodebuild -project ios/Pods/Pods.xcodeproj \
            -target secure-pdf-viewer \
            -configuration Release \
            -sdk iphoneos \
            build \
            HEADER_SEARCH_PATHS="$HEADER_SEARCH_PATHS $(PODS_ROOT)/Yoga/yoga" \
            | tee secure-pdf-viewer-build.log

      - name: "验证已安装的签名配置文件（只读）"
        script: |
          set -euo pipefail
          PDIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "==> $PDIR中的配置文件"
          ls -l "$PDIR" || true
          shopt -s nullglob
          for f in "$PDIR"/*.mobileprovision "$PDIR"/*.provisionprofile; do
            echo "----- $f -----"
            /usr/bin/security cms -D -i "$f" > /tmp/p.plist || { echo "  无法解码"; continue; }
            echo "名称:  $(/usr/bin/plutil -extract Name raw -o - /tmp/p.plist 2>/dev/null || true)"
            echo "UUID:  $(/usr/bin/plutil -extract UUID raw -o - /tmp/p.plist 2>/dev/null || true)"
            echo "AppID: $(/usr/bin/plutil -extract Entitlements.application-identifier raw -o - /tmp/p.plist 2>/dev/null || true)"
            echo -n "包含App Groups: "
            if /usr/libexec/PlistBuddy -c "Print :Entitlements:com.apple.security.application-groups" /tmp/p.plist >/dev/null 2>&1; then
              echo "是"
            else
              echo "否"
            fi
            echo -n "aps-environment: "
            /usr/bin/plutil -extract Entitlements.aps-environment raw -o - /tmp/p.plist 2>/dev/null || echo "(无)"
          done

      - name: "通过Ruby xcodeproj设置签名（安全，无正则）"
        script: |
          set -euo pipefail
          if ! ruby -e "require 'xcodeproj'" 2>/dev/null; then
            gem install xcodeproj --no-document
            export GEM_HOME="$HOME/.gem"
            export PATH="$HOME/.gem/bin:$PATH"
            echo 'export GEM_HOME="$HOME/.gem"' >> $CM_ENV
            echo 'export PATH="$HOME/.gem/bin:$PATH"' >> $CM_ENV
          fi

          ruby - <<'RB'
            require 'xcodeproj'
            proj = Xcodeproj::Project.open('ios/Mattermost.xcodeproj')
            TEAM = ENV.fetch('TEAM_ID', '')
            raise "TEAM_ID为空" if TEAM.nil? || TEAM.empty?
            targets = {
              'Mattermost'          => { bundle: ENV['MAIN_BUNDLE_ID']  || 'com.jboth.mine',                     profile: 'jboth_chat' },
              'MattermostShare'     => { bundle: ENV['SHARE_BUNDLE_ID'] || 'com.jboth.mine.MattermostShare',     profile: 'jboth_share' },
              'NotificationService' => { bundle: ENV['NOTI_BUNDLE_ID']  || 'com.jboth.mine.NotificationService', profile: 'jboth_notification' },
            }
            proj.targets.each do |t|
              next unless targets.key?(t.name)
              spec = targets[t.name]
              t.build_configurations.each do |cfg|
                next unless cfg.name == 'Release'
                bs = cfg.build_settings
                bs['PRODUCT_BUNDLE_IDENTIFIER'] = spec[:bundle]
                bs['DEVELOPMENT_TEAM'] = TEAM
                bs['CODE_SIGN_STYLE'] = 'Manual'
                bs['CODE_SIGN_IDENTITY[sdk=iphoneos*]'] = 'Apple Distribution'
                bs['PROVISIONING_PROFILE_SPECIFIER[sdk=iphoneos*]'] = spec[:profile]
                bs.delete('PROVISIONING_PROFILE')
                bs.delete('CODE_SIGN_IDENTITY')
              end
            end
            proj.save
            puts "签名设置已安全更新。"
          RB

          if ! xcodebuild -project ios/Mattermost.xcodeproj -list >/dev/null; then
            echo "项目不可读，回滚到.good文件"
            cp ios/Mattermost.xcodeproj/project.pbxproj.good ios/Mattermost.xcodeproj/project.pbxproj
            exit 1
          fi

      - name: "按目标转储签名密钥（Release + iphoneos）"
        script: |
          set -euo pipefail
          for T in Mattermost MattermostShare NotificationService; do
            echo "---- $T ----"
            xcodebuild -project ios/Mattermost.xcodeproj \
              -target "$T" \
              -configuration Release \
              -sdk iphoneos \
              -showBuildSettings \
              | egrep "(PRODUCT_BUNDLE_IDENTIFIER|CODE_SIGN_ENTITLEMENTS|DEVELOPMENT_TEAM|CODE_SIGN_STYLE|CODE_SIGN_IDENTITY\[sdk=iphoneos\*\]|PROVISIONING_PROFILE_SPECIFIER\[sdk=iphoneos\*\])" \
              || true
          done

      - name: "构建归档"
        script: |
          set -e
          cd ios
          xcodebuild -workspace Mattermost.xcworkspace \
            -scheme Mattermost \
            -configuration Release \
            -sdk iphoneos \
            -archivePath build/ios/xcarchive/Mattermost.xcarchive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="${TEAM_ID}" \
            COMPILER_INDEX_STORE_ENABLE=NO \
            SWIFT_STRICT_CONCURRENCY=minimal \
            HEADER_SEARCH_PATHS="$HEADER_SEARCH_PATHS $(PODS_ROOT)/Yoga/yoga" \
            archive | xcpretty && exit ${PIPESTATUS[0]}

      - name: "生成导出选项（App Store）"
        script: |
          set -e
          cat > export_options.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>destination</key><string>export</string>
            <key>compileBitcode</key><false/>
          </dict>
          </plist>
          EOF

      - name: "导出IPA"
        script: |
          set -e
          cd ios
          xcodebuild -exportArchive \
            -archivePath build/ios/xcarchive/Mattermost.xcarchive \
            -exportPath ipa \
            -exportOptionsPlist ../export_options.plist | xcpretty && exit ${PIPESTATUS[0]}

    artifacts:
      - ios/ipa/*.ipa
      - ios/build/**/*.xcarchive

    publishing:
      app_store_connect:
        api_key: "$APP_STORE_CONNECT_PRIVATE_KEY"
        key_id: "$APP_STORE_CONNECT_KEY_ID"
        issuer_id: "$APP_STORE_CONNECT_ISSUER_ID"
        submit_to_testflight: true
      email:
        recipients:
          - bill.fan4java@gmail.com