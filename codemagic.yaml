workflows:
  ios-mattermost-release:
    name: iOS Mattermost (Whitelabel) – Ad-hoc
    max_build_duration: 120
    instance_type: mac_mini_m2
    environment:
      vars:
        # === 基本信息（按需修改）===
        TEAM_ID: "866Y22894T"
        APP_BUNDLE_ID: "com.jboth.mine"
        SHARE_BUNDLE_ID: "com.jboth.mine.MattermostShare"
        NOTIF_BUNDLE_ID: "com.jboth.mine.NotificationService"
        APP_GROUP: "group.com.jboth.mine"
        EXPORT_METHOD: "ad-hoc"
        SCHEME: "Mattermost"
        WORKSPACE: "ios/Mattermost.xcworkspace"
        PROJECT: "ios/Mattermost.xcodeproj"
        CONFIGURATION: "Release"
        IOS_DEPLOYMENT_TARGET: "16.0"   # RN + 最近 Pods 兼容建议 16+
        SWIFT_VERSION: "5.9"           # Xcode 16 对应 Swift 5.9/5.10, 设定一个稳定值
      xcode: 16.4
      node: 20
      cocoapods: default
      # 如果你用 Codemagic Keychain 安装了 Apple Distribution 证书，这里无需额外配置
      # 如果要用，自行在 UI 设置里关联 Keychain & Provisioning Profiles 即可
    cache:
      cache_paths:
        - $HOME/Library/Caches/CocoaPods
        - ios/Pods
        - node_modules
    triggering:
      events:
        - push
        - pull_request
      branch_patterns:
        - pattern: "*"
          include: true
          source: true

    scripts:
      # --- 0) 基础信息 ---
      - name: Print tool versions
        script: |
          set -euo pipefail
          sw_vers
          xcodebuild -version
          ruby -v
          node -v
          npm -v
          pod --version

      - name: Fix JS deps (pin eslint 8 / yaml / ws)
        script: |
          set -euo pipefail

          # 始终使用官方源，避免镜像缺包
          npm config set registry https://registry.npmjs.org/

          # 用 overrides 统一钉死版本（影响所有间接依赖）
          node - <<'NODE'
          const fs = require('fs');
          const p = JSON.parse(fs.readFileSync('package.json','utf8'));

          p.overrides = Object.assign({}, p.overrides, {
            "eslint": "8.57.1",   // 满足 @typescript-eslint@7 的 peer
            "yaml":   "2.4.5",    // 2.4.1 不存在
            "ws":     "7.5.9"     // 7.5.10 不存在，钉到 7.5.9
          });

          // 顺便把根依赖里同名条目也修到可用版本（若存在）
          for (const sect of ["dependencies","devDependencies"]) {
            if (!p[sect]) continue;
            if (p[sect].eslint) p[sect].eslint = "8.57.1";
            if (p[sect].yaml   && p[sect].yaml === "2.4.1") p[sect].yaml = "2.4.5";
            if (p[sect].ws     && p[sect].ws   === "7.5.10") p[sect].ws   = "7.5.9";
          }

          fs.writeFileSync('package.json', JSON.stringify(p, null, 2));
          console.log('overrides pinned: eslint@8.57.1, yaml@2.4.5, ws@7.5.9');
          NODE

          # 仅更新 lock，不安装；确保 lock 里把冲突版本替换掉
          npm i -D eslint@8.57.1 yaml@2.4.5 ws@7.5.9 --package-lock-only

          # 可选：若历史 lock 中仍残留 7.5.10，强制替换（容错）
          if grep -q '"ws": "7.5.10"' package-lock.json 2>/dev/null; then
            sed -i.bak 's/"ws": "7.5.10"/"ws": "7.5.9"/g' package-lock.json || true
          fi

          npm cache verify || true


      - name: Install JS deps
        script: |
          set -euo pipefail
          # 避免 peer 冲突阻断安装（我们已用 overrides 兜底）
          npm ci --prefer-offline --no-audit --progress=false


      # --- 2) 可选：恢复健康的 pbxproj（如果你仓库里有 .clean 备份）---
      - name: Optional restore healthy pbxproj if .clean exists
        script: |
          set -euo pipefail
          if [ -f "ios/Mattermost.xcodeproj/project.pbxproj.clean" ]; then
            echo "Using committed clean pbxproj backup"
            cp ios/Mattermost.xcodeproj/project.pbxproj.clean ios/Mattermost.xcodeproj/project.pbxproj
          else
            echo "No .clean pbxproj provided; continue with current file."
          fi

      # --- 3) 修复 Podfile：重写 target 'Mattermost'（消除多余 end）---
      - name: Podfile fix #1 – normalize target 'Mattermost'
        script: |
          set -euo pipefail
          P=ios/Podfile
          test -f "$P"
          cp "$P" ios/Podfile.pre_mattermost_fix.bak

          ruby - <<'RUBY'
          path = 'ios/Podfile'
          s = File.read(path)

          canonical_mattermost = <<~'BLOCK'
          target 'Mattermost' do
            use_expo_modules!
            config = use_native_modules!

            use_react_native!(
              :path => config[:reactNativePath],
              :app_path => "#{Pod::Config.instance.installation_root}/.."
            )

            pod 'React-jsi', :path => '../node_modules/react-native/ReactCommon/jsi', :modular_headers => true
            pod 'React-jsc', :path => '../node_modules/react-native/ReactCommon/jsc', :modular_headers => true
            pod 'simdjson', :path => '../node_modules/@nozbe/simdjson', :modular_headers => true
            pod 'CocoaLumberjack', :modular_headers => true
            pod 'TurboLogIOSNative', :git => 'https://github.com/larkox/react-native-turbo-log-ios-native.git', :tag => '0.2.0', :modular_headers => true
          end
          BLOCK

          # 用非贪婪匹配替换 target 'Mattermost' 块（直到自身 end）
          s.sub!(/(^\s*target\s+'Mattermost'\s+do\s*\n).*?^\s*end\s*$/m, canonical_mattermost) or
            raise "Could not find target 'Mattermost' block to replace"

          File.write(path, s)
          puts "Rewrote Podfile: normalized target 'Mattermost' block."
          RUBY

          echo "==> peek 35..90"
          nl -ba ios/Podfile | sed -n '35,90p' || true

      # --- 4) 修复 Podfile：确保仅一个规范 post_install（C++ 设置）---
      - name: Podfile fix #2 – single canonical post_install (C++ std)
        script: |
          set -euo pipefail
          P=ios/Podfile
          test -f "$P"
          cp "$P" ios/Podfile.pre_postinstall_fix.bak

          ruby - <<'RUBY'
          path = 'ios/Podfile'
          s = File.read(path)

          # 删除所有 post_install 块
          loop do
            before = s.dup
            s = s.sub(/post_install\s+do\s+\|installer\|.*?^\s*end\s*$/m, '')
            break if s == before
          end

          canonical = <<~'POST'

            # === Canonical post_install: C++ toolchain settings ===
            post_install do |installer|
              # 默认：所有 Pods 统一为 gnu++17
              installer.pods_project.targets.each do |t|
                t.build_configurations.each do |cfg|
                  bs = cfg.build_settings
                  bs['CLANG_CXX_LANGUAGE_STANDARD'] = 'gnu++17'
                  bs['CLANG_CXX_LIBRARY'] = 'libc++'
                  flags = Array(bs['OTHER_CPLUSPLUSFLAGS']).map(&:to_s)
                  flags.reject! { |f| f.start_with?('-std=') }
                  flags << '-std=gnu++17'
                  bs['OTHER_CPLUSPLUSFLAGS'] = flags.uniq
                end
              end

              # React-* 目标用 C++20（修复 unordered_map::contains 等）
              react_cpp_targets = installer.pods_project.targets.select { |t| t.name.start_with?('React-') }
              react_cpp_targets.each do |t|
                t.build_configurations.each do |cfg|
                  bs = cfg.build_settings
                  bs['CLANG_CXX_LANGUAGE_STANDARD'] = 'gnu++20'
                  flags = Array(bs['OTHER_CPLUSPLUSFLAGS']).map(&:to_s)
                  flags.reject! { |f| f.start_with?('-std=') }
                  flags << '-std=gnu++20'
                  bs['OTHER_CPLUSPLUSFLAGS'] = flags.uniq
                  bs['CLANG_CXX_LIBRARY'] = 'libc++'
                end
              end

              # secure-pdf-viewer 需要异常/RTTI（ObjC++）
              spv = installer.pods_project.targets.find { |t| t.name == 'secure-pdf-viewer' }
              if spv
                spv.build_configurations.each do |cfg|
                  bs = cfg.build_settings
                  bs['GCC_ENABLE_CPP_EXCEPTIONS'] = 'YES'
                  bs['GCC_ENABLE_CPP_RTTI'] = 'YES'
                end
              end
            end
          POST

          s = s.rstrip + "\n\n" + canonical + "\n"
          File.write(path, s)
          puts "Wrote single canonical post_install."
          RUBY

          echo "==> peek last lines"
          tail -n 80 ios/Podfile

      # --- 5) pod install ---
      - name: Install pods (with repo update)
        script: |
          set -euo pipefail
          pushd ios >/dev/null
          pod repo update
          pod install --repo-update
          popd >/dev/null

      # --- 6) 注入 Entitlements（App Group + aps-environment=production）---
      - name: Ensure entitlements (App Group & aps)
        script: |
          set -euo pipefail
          E_APP="ios/Mattermost/Mattermost.entitlements"
          E_SHARE="ios/MattermostShare/MattermostShare.entitlements"
          E_NOTIF="ios/NotificationService/NotificationService.entitlements"

          for E in "$E_APP" "$E_SHARE" "$E_NOTIF"; do
            /usr/libexec/PlistBuddy -c "Add :com.apple.security.application-groups array" "$E" 2>/dev/null || true
            /usr/libexec/PlistBuddy -c "Delete :com.apple.security.application-groups" "$E" 2>/dev/null || true
            /usr/libexec/PlistBuddy -c "Add :com.apple.security.application-groups array" "$E"
            /usr/libexec/PlistBuddy -c "Add :com.apple.security.application-groups:0 string $APP_GROUP" "$E"
          done

          # 主 app 需要 push
          /usr/libexec/PlistBuddy -c "Set :aps-environment production" "$E_APP" 2>/dev/null || \
          /usr/libexec/PlistBuddy -c "Add :aps-environment string production" "$E_APP"

          echo "Entitlements updated."

      # --- 7) 安装/拷贝 Provisioning Profiles（来自 Secure files）---
      # 把 3 个 .mobileprovision 作为 Secure files 关联到该工作流即可（名字不限）
      - name: Install provisioning profiles
        script: |
          set -euo pipefail
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          for f in *.mobileprovision; do
            if [ -f "$f" ]; then
              cp "$f" "$HOME/Library/MobileDevice/Provisioning Profiles/$(basename "$f")"
              echo "Installed profile: $f"
            fi
          done
          ls -l "$HOME/Library/MobileDevice/Provisioning Profiles" || true

      # --- 8) 强制设置 Manual 签名 + 绑定 TEAM/IDENTITY（仅 sdk=iphoneos*）---
      - name: Patch signing in pbxproj (manual + team + identity)
        script: |
          set -euo pipefail
          PBX="ios/Mattermost.xcodeproj/project.pbxproj"
          test -f "$PBX"

          # 统一为手动签名；设置 TEAM；设置发行证书标识（Apple Distribution）
          ruby - <<'RUBY'
          pbx = 'ios/Mattermost.xcodeproj/project.pbxproj'
          s = File.read(pbx)

          # 手动签名
          s.gsub!(/CODE_SIGN_STYLE\s*=\s*Automatic;/, 'CODE_SIGN_STYLE = Manual;')

          # TEAM
          team = ENV['TEAM_ID'] || ''
          raise "TEAM_ID missing" if team.empty?
          s.gsub!(/DEVELOPMENT_TEAM\s*=\s*[A-Z0-9]+;/, "DEVELOPMENT_TEAM = #{team};")

          # 证书标识：仅限制到 iPhoneOS
          s.gsub!(/"CODE_SIGN_IDENTITY\[sdk=iphoneos\*\]"\s*=\s*"[^"]+";/, '"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "Apple Distribution";')
          s.gsub!(/CODE_SIGN_IDENTITY\s*=\s*"[^"]+";/, 'CODE_SIGN_IDENTITY = "Apple Distribution";')

          File.write(pbx, s)
          puts "Patched pbxproj signing (Manual/TEAM/IDENTITY)."
          RUBY

      # --- 9) 为 3 个 target 匹配对应的 Provisioning Profile（Specifier & UUID）---
      - name: Bind provisioning profiles to targets
        script: |
          set -euo pipefail
          PBX="ios/Mattermost.xcodeproj/project.pbxproj"

          # 解析系统中可用的 profiles（简单 grep/awk）
          list_profiles() {
            for p in "$HOME/Library/MobileDevice/Provisioning Profiles/"*.mobileprovision; do
              /usr/bin/security cms -D -i "$p" >/tmp/p.plist
              NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" /tmp/p.plist 2>/dev/null || true)
              UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /tmp/p.plist 2>/dev/null || true)
              APPID=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" /tmp/p.plist 2>/dev/null || true)
              echo "$NAME|$UUID|$APPID|$p"
            done
          }

          bind_one() {
            local BID="$1"   # bundle id
            local NAME="$2"  # friendly name (for log)
            local LINE
            LINE=$(list_profiles | awk -F'|' -v bid="$TEAM_ID.$BID" '$3==bid {print; exit}')
            if [ -z "$LINE" ]; then
              echo "ERROR: No profile for $BID"; exit 1
            fi
            IFS='|' read PNAME PUUID PAPP PFILE <<<"$LINE"
            echo "Matched $NAME ($BID): $PNAME ($PUUID)"

            # 写入 pbxproj：只改 sdk=iphoneos*
            /usr/bin/perl -0777 -pe "s/\"PROVISIONING_PROFILE_SPECIFIER\\[sdk=iphoneos\\*\\]\" = \".*?\";/\"PROVISIONING_PROFILE_SPECIFIER[sdk=iphoneos*]\" = \"$PNAME\";/g" -i "$PBX"
            /usr/bin/perl -0777 -pe "s/\"PROVISIONING_PROFILE\\[sdk=iphoneos\\*\\]\" = \".*?\";/\"PROVISIONING_PROFILE[sdk=iphoneos*]\" = \"$PUUID\";/g" -i "$PBX"
          }

          bind_one "$APP_BUNDLE_ID"      "Mattermost"
          bind_one "$SHARE_BUNDLE_ID"    "MattermostShare"
          bind_one "$NOTIF_BUNDLE_ID"    "NotificationService"

          echo "Profiles bound in pbxproj."

      # --- 10) 最小 sanity：列出 scheme & 目标 ---
      - name: Sanity check xcodebuild -list
        script: |
          set -euo pipefail
          xcodebuild -project "$PROJECT" -list
          xcodebuild -workspace "$WORKSPACE" -list

      # --- 11) 编译归档 ---
      - name: Build archive
        script: |
          set -euo pipefail
          set -o pipefail
          xcodebuild -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -sdk iphoneos \
            -archivePath ios/build/Mattermost.xcarchive \
            CODE_SIGN_STYLE=Manual \
            COMPILER_INDEX_STORE_ENABLE=NO \
            build archive | xcpretty
          status=${PIPESTATUS[0]}
          exit $status

      # --- 12) 导出 IPA（ad-hoc），显式写入 provisioningProfiles 映射 ---
      - name: Export IPA
        script: |
          set -euo pipefail
          cat > exportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>${EXPORT_METHOD}</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${APP_BUNDLE_ID}</key>
              <string>jboth_chat</string>
              <key>${SHARE_BUNDLE_ID}</key>
              <string>jboth_share</string>
              <key>${NOTIF_BUNDLE_ID}</key>
              <string>jboth_notification</string>
            </dict>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath ios/build/Mattermost.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build_output

          ls -lah build_output

    artifacts:
      - build_output/*.ipa
      - ios/build/Mattermost.xcarchive
      - build_output/*.dSYM.zip
      - exportOptions.plist
    publishing:
      email:
        recipients:
          - you@example.com
        notify:
          success: true
          failure: true
