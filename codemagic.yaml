workflows:
  ios-mattermost-release:
    name: "Mattermost iOS (App Groups + Push)"
    instance_type: mac_mini_m2
    max_build_duration: 60

    environment:
      groups:
        - ios_match
      vars:
        APP_NAME: "Mattermost"
        MAIN_BUNDLE_ID: "com.jboth.mine"
        SHARE_BUNDLE_ID: "com.jboth.mine.MattermostShare"
        NOTI_BUNDLE_ID: "com.jboth.mine.NotificationService"
        APP_GROUP_ID: "group.com.jboth.mine"
        TEAM_ID: "866Y22894T"
        CI: "true"
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.jboth.mine

    scripts:
      - name: "Print tool versions"
        script: |
          set -e
          xcodebuild -version
          ruby -v
          pod --version

      - name: "Use Node 20 LTS"
        script: |
          set -euo pipefail
          export NVM_DIR="$HOME/.nvm"
          if [ -s "$NVM_DIR/nvm.sh" ]; then
            . "$NVM_DIR/nvm.sh"
            nvm install 20
            nvm use 20
            echo 'export NVM_DIR="$HOME/.nvm"' >> $CM_ENV
            echo '. "$NVM_DIR/nvm.sh" && nvm use 20 >/dev/null' >> $CM_ENV
          else
            echo "nvm not found, fallback to Homebrew node@20"
            brew update || true
            brew install node@20 || true
            export PATH="/opt/homebrew/opt/node@20/bin:$PATH"
            echo 'export PATH="/opt/homebrew/opt/node@20/bin:$PATH"' >> $CM_ENV
          fi
          node -v
          npm -v || true
          yarn -v || true

      - name: "Install JS deps (root)"
        script: |
          set -e
          yarn install --frozen-lockfile || npm ci

      - name: "Patch Podfile resolver (no heredoc)"
        script: |
          set -euo pipefail
          PODFILE="ios/Podfile"
          if [ -f "$PODFILE" ]; then
            if grep -q "require Pod::Executable.execute_command('node', \['-p'" "$PODFILE"; then
              perl -0777 -i -pe "s/require Pod::Executable.execute_command\(\s*'node'.*?\)\s*\]/react_native_pods = Pod::Executable.execute_command(\n  'node',\n  [\n    '-p',\n    <<~'NODE',\n      require.resolve(\n        'react-native\/scripts\/react_native_pods.rb',\n        { paths: [process.argv[1]] },\n      )\n    NODE,\n    Pod::Config.instance.project_root.to_s\n  ]\n)\nrequire react_native_pods/s" "$PODFILE"
              echo "Patched Podfile resolver to use project_root"
            else
              echo "Podfile resolver already modernized or not matching; skip."
            fi
          else
            echo "Podfile not found at ios/Podfile"
          fi

      # ① MUST：物化干净 pbxproj + 校验（先于一切 Xcode 操作）
      - name: "Project: set iOS 16 + Swift 5.9 + strict concurrency=minimal (Release)"
        script: |
          set -euo pipefail
          if ! ruby -e "require 'xcodeproj'" 2>/dev/null; then
            gem install xcodeproj --no-document
            export GEM_HOME="$HOME/.gem"
            export PATH="$HOME/.gem/bin:$PATH"
            echo 'export GEM_HOME="$HOME/.gem"' >> $CM_ENV
            echo 'export PATH="$HOME/.gem/bin:$PATH"' >> $CM_ENV
          fi

          ruby - <<'RB'
            require 'xcodeproj'
            proj = Xcodeproj::Project.open('ios/Mattermost.xcodeproj')
            targets = ['Mattermost', 'MattermostShare', 'NotificationService']
            proj.targets.each do |t|
              next unless targets.include?(t.name)
              t.build_configurations.each do |cfg|
                next unless cfg.name == 'Release'
                bs = cfg.build_settings
                bs['SWIFT_VERSION'] = '5.9'
                if bs['IPHONEOS_DEPLOYMENT_TARGET'].to_s < '16.0'
                  bs['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
                end
                bs['SWIFT_STRICT_CONCURRENCY'] = 'minimal'
              end
            end
            proj.save
            puts "Project Release configs updated."
          RB

          xcodebuild -project ios/Mattermost.xcodeproj -list


      - name: "Bump deployment target in project to iOS 16.0 (Release only)"
        script: |
          set -euo pipefail
          if ! ruby -e "require 'xcodeproj'" 2>/dev/null; then
            gem install xcodeproj --no-document
            export GEM_HOME="$HOME/.gem"
            export PATH="$HOME/.gem/bin:$PATH"
            echo 'export GEM_HOME="$HOME/.gem"' >> $CM_ENV
            echo 'export PATH="$HOME/.gem/bin:$PATH"' >> $CM_ENV
          fi

          ruby - <<'RB'
            require 'xcodeproj'
            proj = Xcodeproj::Project.open('ios/Mattermost.xcodeproj')
            targets = ['Mattermost', 'MattermostShare', 'NotificationService']
            proj.targets.each do |t|
              next unless targets.include?(t.name)
              t.build_configurations.each do |cfg|
                next unless cfg.name == 'Release'
                bs = cfg.build_settings
                # 仅在小于 16.0 时提升；不向下覆盖
                if bs['IPHONEOS_DEPLOYMENT_TARGET'].to_s < '16.0'
                  bs['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
                end
              end
            end
            proj.save
            puts "Raised IPHONEOS_DEPLOYMENT_TARGET to 16.0 for Release configs."
          RB

          # 确认 project 仍可读
          xcodebuild -project ios/Mattermost.xcodeproj -list


      - name: "MUST: materialize & verify clean pbxproj (.clean)"
        script: |
          set -euo pipefail
          SRC="ios/Mattermost.xcodeproj/project.pbxproj.clean"
          DST="ios/Mattermost.xcodeproj/project.pbxproj"
          ls -l "$SRC"
          cp "$SRC" "$DST"
          md5_src=$(md5 -q "$SRC"); md5_dst=$(md5 -q "$DST")
          echo "SRC MD5: $md5_src"; echo "DST MD5: $md5_dst"
          [ "$md5_src" = "$md5_dst" ] || { echo "Overwrite failed"; exit 1; }
          cp "$DST" ios/Mattermost.xcodeproj/project.pbxproj.good
          xcodebuild -project ios/Mattermost.xcodeproj -list

      - name: "Project: unify Swift=5.9 + iOS 16.0 + concurrency=minimal (ALL configs)"
        script: |
          set -euo pipefail
          if ! ruby -e "require 'xcodeproj'" 2>/dev/null; then
            gem install xcodeproj --no-document
            export GEM_HOME="$HOME/.gem"
            export PATH="$HOME/.gem/bin:$PATH"
            echo 'export GEM_HOME="$HOME/.gem"' >> $CM_ENV
            echo 'export PATH="$HOME/.gem/bin:$PATH"' >> $CM_ENV
          fi

          ruby - <<'RB'
            require 'xcodeproj'
            proj = Xcodeproj::Project.open('ios/Mattermost.xcodeproj')

            # 覆盖工程级别（可选，保险）
            proj.build_configurations.each do |cfg|
              bs = cfg.build_settings
              bs['SWIFT_VERSION'] = '5.9'
              if bs['IPHONEOS_DEPLOYMENT_TARGET'].to_s < '16.0'
                bs['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
              end
              bs['SWIFT_STRICT_CONCURRENCY'] = 'minimal'
            end

            # 覆盖三个 targets 的“所有配置”（Debug/Release都要统一）
            targets = ['Mattermost','MattermostShare','NotificationService']
            proj.targets.each do |t|
              next unless targets.include?(t.name)
              t.build_configurations.each do |cfg|
                bs = cfg.build_settings
                bs['SWIFT_VERSION'] = '5.9'
                if bs['IPHONEOS_DEPLOYMENT_TARGET'].to_s < '16.0'
                  bs['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
                end
                bs['SWIFT_STRICT_CONCURRENCY'] = 'minimal'
              end
            end

            proj.save
            puts "Unified Swift/iOS/concurrency across ALL build configurations."
          RB

          # 再次快速健康检查
          xcodebuild -project ios/Mattermost.xcodeproj -list

      - name: "Patch Podfile: add C++17 settings for Pods (incl. secure-pdf-viewer)"
        script: |
          set -euo pipefail
          P=ios/Podfile
          test -f "$P"

          ruby - <<'RUBY'
          path = 'ios/Podfile'
          s = File.read(path)

          # 生成一个完整的 post_install 块（当原文件没有时使用）
          def cxx_post_install_block
            <<~'BLOCK'
            post_install do |installer|
              installer.pods_project.targets.each do |t|
                t.build_configurations.each do |cfg|
                  bs = cfg.build_settings
                  bs['CLANG_CXX_LANGUAGE_STANDARD'] = 'gnu++17'
                  bs['CLANG_CXX_LIBRARY'] = 'libc++'
                  existing = Array(bs['OTHER_CPLUSPLUSFLAGS'])
                  need = ['-std=gnu++17']
                  bs['OTHER_CPLUSPLUSFLAGS'] = (existing + need).uniq
                end
              end

              target = installer.pods_project.targets.find { |tt| tt.name == 'secure-pdf-viewer' }
              if target
                target.build_configurations.each do |cfg|
                  bs = cfg.build_settings
                  bs['GCC_ENABLE_CPP_EXCEPTIONS'] = 'YES'
                  bs['GCC_ENABLE_CPP_RTTI'] = 'YES'
                end
              end
            end
            BLOCK
          end

          if s =~ /post_install do \|installer\|.*?end/m
            # 已有 post_install：若未包含 C++ 设置，则在 end 之前插入一段（幂等）
            s = s.gsub(/post_install do \|installer\|.*?end/m) do |blk|
              if blk.include?("CLANG_CXX_LANGUAGE_STANDARD")
                blk
              else
                blk.sub(/end\s*\z/, <<~'INJECT'.chomp + "\nend")
                  
                  installer.pods_project.targets.each do |t|
                    t.build_configurations.each do |cfg|
                      bs = cfg.build_settings
                      bs['CLANG_CXX_LANGUAGE_STANDARD'] = 'gnu++17'
                      bs['CLANG_CXX_LIBRARY'] = 'libc++'
                      existing = Array(bs['OTHER_CPLUSPLUSFLAGS'])
                      need = ['-std=gnu++17']
                      bs['OTHER_CPLUSPLUSFLAGS'] = (existing + need).uniq
                    end
                  end

                  target = installer.pods_project.targets.find { |tt| tt.name == 'secure-pdf-viewer' }
                  if target
                    target.build_configurations.each do |cfg|
                      bs = cfg.build_settings
                      bs['GCC_ENABLE_CPP_EXCEPTIONS'] = 'YES'
                      bs['GCC_ENABLE_CPP_RTTI'] = 'YES'
                    end
                  end
                INJECT
              end
            end
          else
            # 没有 post_install：追加一个完整块
            s << "\n" << cxx_post_install_block << "\n"
          end

          File.write(path, s)
          puts "Podfile post_install enhanced with C++17 settings."
          RUBY



      - name: "Install pods"
        script: |
          set -e
          cd ios
          pod repo update || true
          pod install --repo-update

      - name: "Diagnose Pods: build secure-pdf-viewer target verbosely (no xcpretty)"
        script: |
          set -euo pipefail
          # 直接构建 Pods 工程里的目标，避免 xcpretty 吃掉错误
          xcodebuild -project ios/Pods/Pods.xcodeproj \
            -target secure-pdf-viewer \
            -configuration Release \
            -sdk iphoneos \
            build \
            | tee secure-pdf-viewer-build.log


      - name: "Verify installed provisioning profiles (read-only)"
        script: |
          set -euo pipefail
          PDIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "==> Profiles in $PDIR"
          ls -l "$PDIR" || true
          shopt -s nullglob
          for f in "$PDIR"/*.mobileprovision "$PDIR"/*.provisionprofile; do
            echo "----- $f -----"
            /usr/bin/security cms -D -i "$f" > /tmp/p.plist || { echo "  failed to decode"; continue; }
            echo "Name:  $(/usr/bin/plutil -extract Name raw -o - /tmp/p.plist 2>/dev/null || true)"
            echo "UUID:  $(/usr/bin/plutil -extract UUID raw -o - /tmp/p.plist 2>/dev/null || true)"
            echo "AppID: $(/usr/bin/plutil -extract Entitlements.application-identifier raw -o - /tmp/p.plist 2>/dev/null || true)"
            echo -n "Has App Groups: "
            if /usr/libexec/PlistBuddy -c "Print :Entitlements:com.apple.security.application-groups" /tmp/p.plist >/dev/null 2>&1; then
              echo "yes"
            else
              echo "no"
            fi
            echo -n "aps-environment: "
            /usr/bin/plutil -extract Entitlements.aps-environment raw -o - /tmp/p.plist 2>/dev/null || echo "(none)"
          done

      # ② 用 Ruby xcodeproj 安全写签名（替代任何注入/新增行方式）
      - name: "Set signing via Ruby xcodeproj (safe, no regex)"
        script: |
          set -euo pipefail
          if ! ruby -e "require 'xcodeproj'" 2>/dev/null; then
            gem install xcodeproj --no-document
            export GEM_HOME="$HOME/.gem"
            export PATH="$HOME/.gem/bin:$PATH"
            echo 'export GEM_HOME="$HOME/.gem"' >> $CM_ENV
            echo 'export PATH="$HOME/.gem/bin:$PATH"' >> $CM_ENV
          fi

          ruby - <<'RB'
            require 'xcodeproj'
            proj = Xcodeproj::Project.open('ios/Mattermost.xcodeproj')

            TEAM  = ENV.fetch('TEAM_ID', '')
            raise "TEAM_ID empty" if TEAM.nil? || TEAM.empty?

            targets = {
              'Mattermost'          => { bundle: ENV['MAIN_BUNDLE_ID']  || 'com.jboth.mine',                     profile: 'jboth_chat' },
              'MattermostShare'     => { bundle: ENV['SHARE_BUNDLE_ID'] || 'com.jboth.mine.MattermostShare',     profile: 'jboth_share' },
              'NotificationService' => { bundle: ENV['NOTI_BUNDLE_ID']  || 'com.jboth.mine.NotificationService', profile: 'jboth_notification' },
            }

            proj.targets.each do |t|
              next unless targets.key?(t.name)
              spec = targets[t.name]

              t.build_configurations.each do |cfg|
                next unless cfg.name == 'Release'  # 仅改 Release
                bs = cfg.build_settings
                bs['PRODUCT_BUNDLE_IDENTIFIER'] = spec[:bundle]
                bs['DEVELOPMENT_TEAM']          = TEAM
                bs['CODE_SIGN_STYLE']           = 'Manual'
                bs['CODE_SIGN_IDENTITY[sdk=iphoneos*]']            = 'Apple Distribution'
                bs['PROVISIONING_PROFILE_SPECIFIER[sdk=iphoneos*]'] = spec[:profile]
                # 保底：移除旧的整机键，避免走错
                bs.delete('PROVISIONING_PROFILE')
                bs.delete('CODE_SIGN_IDENTITY')
              end
            end

            proj.save
            puts "Signing settings updated safely."
          RB

          # 立即验证；若损坏则回滚
          if ! xcodebuild -project ios/Mattermost.xcodeproj -list >/dev/null; then
            echo "Project became unreadable; rollback to .good"
            cp ios/Mattermost.xcodeproj/project.pbxproj.good ios/Mattermost.xcodeproj/project.pbxproj
            exit 1
          fi

      # ③ project 级签名键自检（避免受 workspace 干扰）
      - name: "Dump signing keys per target (Release + iphoneos) via project"
        script: |
          set -euo pipefail
          for T in Mattermost MattermostShare NotificationService; do
            echo "---- $T ----"
            xcodebuild -project ios/Mattermost.xcodeproj \
              -target "$T" \
              -configuration Release \
              -sdk iphoneos \
              -showBuildSettings \
              | egrep "(PRODUCT_BUNDLE_IDENTIFIER|CODE_SIGN_ENTITLEMENTS|DEVELOPMENT_TEAM|CODE_SIGN_STYLE|CODE_SIGN_IDENTITY\[sdk=iphoneos\*\]|PROVISIONING_PROFILE_SPECIFIER\[sdk=iphoneos\*\])" \
              || true
          done

      # ④ 归档
      - name: "Build archive"
        script: |
          set -e
          cd ios
          xcodebuild -workspace Mattermost.xcworkspace \
            -scheme Mattermost \
            -configuration Release \
            -sdk iphoneos \
            -archivePath build/ios/xcarchive/Mattermost.xcarchive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="${TEAM_ID}" \
            COMPILER_INDEX_STORE_ENABLE=NO \
            archive | xcpretty && exit ${PIPESTATUS[0]}

      - name: "Generate export options (App Store)"
        script: |
          set -e
          cat > export_options.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>destination</key><string>export</string>
            <key>compileBitcode</key><false/>
          </dict>
          </plist>
          EOF

      - name: "Export IPA"
        script: |
          set -e
          cd ios
          xcodebuild -exportArchive \
            -archivePath build/ios/xcarchive/Mattermost.xcarchive \
            -exportPath ipa \
            -exportOptionsPlist ../export_options.plist | xcpretty && exit ${PIPESTATUS[0]}

    artifacts:
      - ios/ipa/*.ipa
      - ios/build/**/*.xcarchive

    publishing:
      app_store_connect:
        api_key: "$APP_STORE_CONNECT_PRIVATE_KEY"
        key_id: "$APP_STORE_CONNECT_KEY_ID"
        issuer_id: "$APP_STORE_CONNECT_ISSUER_ID"
        submit_to_testflight: true
      email:
        recipients:
          - bill.fan4java@gmail.com
