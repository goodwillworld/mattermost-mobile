  workflows:
  mattermost_whitelabel_ios:
    name: Mattermost WhiteLabel iOS (TestFlight/App Store)
    max_build_duration: 120
    instance_type: mac_mini_m2

    environment:
      xcode: 16.4
      cocoapods: default
      # 如需在 Codemagic 中放密钥，请在 UI 的 Environment variables 里添加，不要写在文件中
      vars:
        FASTLANE_SKIP_UPDATE_CHECK: "1"
        MATCH_READONLY: "true"
        # 你的 Fastfile/Matchfile 已经指向仓库 ios-certs.git 和分支 master
        # 如要覆盖，可在 Codemagic UI 里设置以下变量（可选）：
        # MATCH_GIT_URL: "https://github.com/goodwillworld/ios-certs.git"
        # MATCH_GIT_BRANCH: "master"
        # 也可以在 UI 里设置 FASTLANE_USER / FASTLANE_PASSWORD / APP_STORE_CONNECT_API_KEY_* 等（如果需要）

    cache:
      cache_paths:
        - $HOME/Library/Caches/CocoaPods
        - ios/Pods
        - $HOME/Library/Developer/Xcode/DerivedData
        - $HOME/.gradle/caches # 无伤项，便于后续复用

    scripts:
      - name: Select Ruby (best effort)
        script: |
          rbenv local 3.3.6 || true
          ruby -v
          gem -v
          bundle -v || true

      - name: Install JS dependencies
        script: |
          node -v
          npm -v
          npm ci

      - name: Pod install (with Bundler if Gemfile exists)
        script: |
          cd ios
          if [ -f "../Gemfile" ]; then
            bundle install --path vendor/bundle
            bundle exec pod install
          else
            pod install
          fi

      - name: 🔧 Patch Pods project for TurboLogIOSNative (remove module.modulemap from Compile Sources)
        script: |
          set -e
          cd ios
          ruby - <<'RUBY'
            require 'xcodeproj'
            proj_path = 'Pods/Pods.xcodeproj'
            unless File.exist?(proj_path)
              puts "⚠️ #{proj_path} not found, skip patch"
              exit 0
            end
            proj = Xcodeproj::Project.open(proj_path)
            target = proj.targets.find { |t| t.name == 'TurboLogIOSNative' }
            if target.nil?
              puts "ℹ️ Target TurboLogIOSNative not found, skip patch"
              exit 0
            end
            removed = 0
            # 兼容不同版本 API：source_build_phase / sources_build_phase
            src_phase = target.respond_to?(:source_build_phase) ? target.source_build_phase : target.sources_build_phase
            src_files = src_phase.files

            # 移除误加到 Compile Sources 的任何 *.modulemap，重点是 TurboLogSwift/module.modulemap
            src_files.select { |f|
              path = f.file_ref&.path.to_s
              path.end_with?('TurboLogSwift/module.modulemap') || path.end_with?('.modulemap')
            }.each do |f|
              src_phase.remove_file_reference(f.file_ref)
              removed += 1
            end

            # 显式指定 MODULEMAP_FILE，避免构建器误处理
            target.build_configurations.each do |cfg|
              cfg.build_settings['MODULEMAP_FILE'] = '$(SRCROOT)/TurboLogIOSNative/Sources/TurboLogSwift/module.modulemap'
            end

            proj.save
            puts "✅ Removed #{removed} .modulemap from Compile Sources & set MODULEMAP_FILE"
          RUBY
          cd ..

      - name: Build via fastlane (app-store)
        script: |
          # 使用你仓库里的 Fastlane。你的 Fastfile 已经把导出方式切到 app-store（或由环境导出）
          bundle install || true
          # 强制走 app-store，以匹配 match AppStore ... 的描述文件
          export EXPORT_METHOD=app-store
          bundle exec fastlane ios build

    artifacts:
      - "**/*.ipa"
      - "**/*.xcarchive"
      - "**/dSYM.zip"
      - "fastlane/report.xml"
      - "~/Library/Logs/gym/*.log"

    publishing:
      email:
        recipients:
          - "844655188@qq.com"
        notify:
          success: true
          failure: true
