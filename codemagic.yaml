workflows:
  mm-whitelabel-android-sideload:
    name: Mattermost WhiteLabel ANDROID (sideload)
    max_build_duration: 120
    instance_type: linux_x2
    environment:
      android_signing:
        - jboth_android_keystore_ref
      groups:
        - mm_common
        - jboth_client
      vars:
        BUILD_FOR_RELEASE: 'true'
        ANDROID_BUILD_TASK: assemble
        REPLACE_ASSETS: 'true'
    cache:
      cache_paths:
        - $HOME/.gradle/caches
        - node_modules
    scripts:
      - name: Node ÁéØÂ¢É‰∏é‰æùËµñ
        script: |
          set -e
          export NVM_DIR="$HOME/.nvm"
          if [ -f ".nvmrc" ] && [ -s "$NVM_DIR/nvm.sh" ]; then
            . "$NVM_DIR/nvm.sh"
            nvm install --silent
            nvm use --silent
          else
            echo "‚ö†Ô∏è Êú™Ê£ÄÊµãÂà∞ nvmÔºå‰ΩøÁî®Á≥ªÁªü Node"
            which node || true
            node -v || true
            npm -v || true
          fi
          npm ci
      - name: Ê≥®ÂÖ•Á≠æÂêçÔºàGradleÔºâ
        script: |
          mkdir -p $HOME/.gradle
          cat >> $HOME/.gradle/gradle.properties <<EOF
          MATTERMOST_RELEASE_STORE_FILE=$CM_KEYSTORE_PATH
          MATTERMOST_RELEASE_KEY_ALIAS=$CM_KEY_ALIAS
          MATTERMOST_RELEASE_PASSWORD=$CM_KEY_PASSWORD
          EOF
      - name: ÂÜôÂÖ•/ÂÖúÂ∫ïÈªòËÆ§ÊúçÂä°Âô®ÈÖçÁΩÆÔºàÂ¶Ç‰ªìÂ∫ì‰∏≠Â∑≤Â≠òÂú®Â∞Ü‰∏ç‰ºöË¶ÜÁõñÔºâ
        script: |
          set -e
          mkdir -p assets/override
          CFG=assets/override/config.json
          if [ ! -f "$CFG" ]; then
            cat > "$CFG" <<'JSON'
          {
            "DefaultServerUrl": "https://hello.jboth.com",
            "AutoSelectServerUrl": true
          }
          JSON
            echo "Created $CFG with default server URL."
          else
            echo "Found existing $CFG, keep your repo version."
          fi
      - name: ÁôΩÊ†áÂèòÈáèÁ°ÆËÆ§
        script: |
          echo "APP_NAME=$APP_NAME"
          echo "MAIN_APP_IDENTIFIER=$MAIN_APP_IDENTIFIER"
          echo "APP_SCHEME=$APP_SCHEME"
      - name: ÊûÑÂª∫Ôºà‰ºòÂÖà‰ΩøÁî®‰ªìÂ∫ìËá™Â∏¶ laneÔºâ
        script: |
          set -e
          npm run build:android || echo "lane ÊûÑÂª∫Â§±Ë¥•ÔºåÂ∞ùËØï Gradle ÂÖúÂ∫ï‚Ä¶"
      - name: ÂÖúÂ∫ïÔºöÁõ¥Êé• Gradle ÁîüÊàê APKÔºàÂ¶Ç lane Âè™‰∫ßÂá∫ AABÔºâ
        script: |
          set -e
          cd android
          ./gradlew assembleRelease             -Pandroid.injected.signing.store.file="$CM_KEYSTORE_PATH"             -Pandroid.injected.signing.store.password="$CM_KEY_PASSWORD"             -Pandroid.injected.signing.key.alias="$CM_KEY_ALIAS"             -Pandroid.injected.signing.key.password="$CM_KEY_PASSWORD" || true
          cd -
      - name: Êî∂ÈõÜÂà∂ÂìÅÔºàAPK/AABÔºâ
        script: |
          mkdir -p $CM_ARTIFACTS
          find . -type f -name "*release*.apk" -maxdepth 6 -print -exec cp -f {} $CM_ARTIFACTS \; || true
          find . -type f -name "*.aab" -maxdepth 6 -print -exec cp -f {} $CM_ARTIFACTS \; || true
  mm-whitelabel-ios:
    name: Mattermost WhiteLabel iOS (TestFlight/App Store)
    max_build_duration: 120
    instance_type: mac_mini_m2
    environment:
      groups:
        - mm_common
        - jboth_client
        - ios_match
      vars:
        BUILD_FOR_RELEASE: 'true'
        REPLACE_ASSETS: 'true'
        GYM_EXPORT_METHOD: app-store
    cache:
      cache_paths:
        - $HOME/Library/Caches/CocoaPods
        - ios/Pods
        - node_modules
    scripts:
      - name: ÁéØÂ¢É‰∏é‰æùËµñÔºàNode + watchman + CocoaPods 1.16.1Ôºâ
        script: |
          set -e
          echo "‚ñ∂ Using system Node"
          which node || true
          node -v || true
          npm -v || true
          echo "‚ñ∂ Install watchmanÔºàSolidarity ÈúÄË¶ÅÔºâ"
          if command -v brew >/dev/null 2>&1; then
            eval "$(/opt/homebrew/bin/brew shellenv)" || true
            brew list watchman >/dev/null 2>&1 || brew install watchman
            watchman --version || true
          else
            echo "‚ùå Homebrew Êú™ÊâæÂà∞ÔºåÊó†Ê≥ïÂÆâË£Ö watchman"; exit 1
          fi
          echo "‚ñ∂ Pin CocoaPods 1.16.1ÔºàÁî®Êà∑ gem ÁõÆÂΩïÔºâ"
          export GEM_HOME="$HOME/.gem"
          export GEM_PATH="$GEM_HOME"
          export PATH="$GEM_HOME/bin:$PATH"
          gem list -i cocoapods -v 1.16.1 || gem install cocoapods -v 1.16.1 --no-document
          unset RUBYOPT BUNDLE_GEMFILE BUNDLE_BIN_PATH BUNDLE_PATH BUNDLER_ORIG_PATH || true
          echo "pod path: $(command -v pod || echo 'not found')"
          env -i PATH="$PATH" GEM_HOME="$GEM_HOME" GEM_PATH="$GEM_PATH" HOME="$HOME" LANG="${LANG:-en_US.UTF-8}" pod _1.16.1_ --version
          echo "‚ñ∂ npm ci"
          npm ci
      - name: Ruby/Fastlane + CocoaPodsÔºàÁî®Âõ∫ÂÆöÁöÑ 1.16.1 ÊâßË°åÔºâ
        script: |
          set -e
          if command -v rbenv >/dev/null 2>&1; then
            RB_INST="$(rbenv versions --bare | grep -E '^[0-9]+\.[0-9]+' | tail -1 || true)"
            export RBENV_VERSION="${RB_INST:-system}"
            echo "Using rbenv Ruby: ${RBENV_VERSION}"
          fi
          ruby -v || true
          if [ -f .ruby-version ]; then
            mv .ruby-version .ruby-version.bak
            trap 'mv .ruby-version.bak .ruby-version 2>/dev/null || true' EXIT
          fi
          cd ios
          RBENV_VERSION="${RBENV_VERSION}" GEM_HOME="$HOME/.gem" GEM_PATH="$HOME/.gem" HOME="$HOME" LANG="${LANG:-en_US.UTF-8}"           pod _1.16.1_ install --repo-update
          cd -
      - name: üîß Patch Pods project (TurboLogIOSNative module.modulemap hotfix)
        script: |
          set -euo pipefail
          cd ios
          ruby - <<'RUBY'
            require 'xcodeproj'
            proj = Xcodeproj::Project.open('Pods/Pods.xcodeproj')
            targets = proj.targets.select { |t| t.name == 'TurboLogIOSNative' }
            if targets.empty?
              puts "‚ÑπÔ∏è Target TurboLogIOSNative not found, skipping"
            else
              targets.each do |t|
                [t.respond_to?(:source_build_phase) ? t.source_build_phase : nil,
                 t.respond_to?(:sources_build_phase) ? t.sources_build_phase : nil].compact.each do |phase|
                  phase.files_references.select { |fr| (fr.path || '').end_with?('.modulemap') }.each { |fr| phase.remove_file_reference(fr) }
                end
                t.build_configurations.each do |cfg|
                  cfg.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = '*/module.modulemap *.modulemap'
                  cfg.build_settings['MODULEMAP_FILE'] = '$(SRCROOT)/TurboLogIOSNative/Sources/TurboLogSwift/module.modulemap'
                  cfg.build_settings['DEFINES_MODULE'] = 'YES'
                end
              end
              proj.save
              puts "‚úÖ Patched TurboLogIOSNative in Pods.xcodeproj"
            end
          RUBY
          cd ..
      - name: ÈÖçÁΩÆËØÅ‰π¶Â∫ìÔºàHTTPS + TokenÔºâÂπ∂Ëá™Ê£Ä
        script: |
          set -e
          if [ -z "${GITHUB_PAT:-}" ]; then echo '‚ùå Áº∫Â∞ë GITHUB_PAT'; exit 1; fi
          export MATCH_GIT_URL="https://${GITHUB_PAT}@github.com/goodwillworld/ios-certs.git"
          echo 'MATCH_GIT_URL set (token masked)'
          git -c credential.helper= ls-remote "$MATCH_GIT_URL" >/dev/null
          echo '‚úÖ match ËØÅ‰π¶Â∫ìÂèØËÆøÈóÆÔºàHTTPS+TokenÔºâ'
          export SIGH_GIT_URL="$MATCH_GIT_URL"
      - name: Ëá™Ê£ÄÂÖ≥ÈîÆÂèòÈáèÔºà‰∏ç‰ºöÊ≥ÑÈú≤Ôºâ
        script: |
          set -e
          check_var() { if [ -z "${!1}" ]; then echo "‚ùå MISSING $1"; exit 1; else echo "‚úÖ $1 OK"; fi; }
          check_var FASTLANE_TEAM_ID
          check_var MATCH_USERNAME
          check_var MATCH_PASSWORD
          check_var MATCH_GIT_URL
          check_var ASC_KEY_ID
          check_var ASC_ISSUER_ID
          if [ -z "$ASC_PRIVATE_KEY" ]; then echo "‚ùå MISSING ASC_PRIVATE_KEY"; exit 1; else echo "‚úÖ ASC_PRIVATE_KEY OK (hidden)"; fi
      - name: ÁîüÊàê ASC API KeyÔºà‰æõ match/gym ‰ΩøÁî®Ôºâ
        script: |
          set -e
          python3 - <<'PY'
          import os, json
          data={
            "key_id": os.environ["ASC_KEY_ID"].strip(),
            "issuer_id": os.environ["ASC_ISSUER_ID"].strip(),
            "key": os.environ["ASC_PRIVATE_KEY"].replace("
","
").replace("
","
"),
            "in_house": False
          }
          open("asc_api_key.json","w").write(json.dumps(data))
          PY
          python3 -m json.tool asc_api_key.json >/dev/null && echo "‚úÖ asc_api_key.json OK"
          export FASTLANE_API_KEY_PATH="$PWD/asc_api_key.json"
      - name: Âº∫Âà∂ÈáçÊñ∞ÁîüÊàê App Store ÊèèËø∞Êñá‰ª∂ÔºàÂåπÈÖç entitlements/App Group ÂêéÂÜçÊâßË°åÔºâ
        script: |
          set -e
          if ! gem list -i fastlane -v 2.228.0 >/dev/null; then gem install fastlane -v 2.228.0 --no-document; fi
          fastlane --version
          export MATCH_APP_IDENTIFIER="com.jboth.mine,com.jboth.mine.MattermostShare,com.jboth.mine.NotificationService"
          export MATCH_TYPE="appstore"
          fastlane run match type:"$MATCH_TYPE" readonly:false force:true app_identifier:"$MATCH_APP_IDENTIFIER" team_id:"$FASTLANE_TEAM_ID" username:"$MATCH_USERNAME" git_url:"$MATCH_GIT_URL" verbose:true
      - name: ÊûÑÂª∫ iOSÔºà‰ΩøÁî®‰ªìÂ∫ì laneÔºâ
        script: |
          set -e
          npm run build:ios
      - name: Êî∂ÈõÜÂà∂ÂìÅ
        script: |
          mkdir -p $CM_ARTIFACTS
          find . -type f -name "*.ipa" -maxdepth 6 -print -exec cp -f {} $CM_ARTIFACTS \; || true
    publishing:
      app_store_connect:
        api_key: |
          -----BEGIN PRIVATE KEY-----
          MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgTHFCUEmtmzuEaG/T
          zD5C5EBtEBsuWf54ZxCbWmpD/lugCgYIKoZIzj0DAQehRANCAAS6nYsA0zoFzGbY
          t9rYpOKdcq0hG8zmImfhjOct0m609Z/J4fOcoxeLd3LJr4DAo6Kk+PBeCFBvrxIl
          j5J7JvfX
          -----END PRIVATE KEY-----
        key_id: UZ33M397NY
        issuer_id: 26e601c9-c2f0-497a-a9e1-39a426cecf9a
        submit_to_testflight: true
