workflows:
  ios-mattermost-release:
    name: Mattermost iOS (App Groups + Push)
    instance_type: mac_mini_m2
    max_build_duration: 60

    environment:
      groups:
        - ios_match
      vars:
        APP_NAME: "Mattermost"
        MAIN_BUNDLE_ID: "com.jboth.mine"
        SHARE_BUNDLE_ID: "com.jboth.mine.MattermostShare"
        NOTI_BUNDLE_ID: "com.jboth.mine.NotificationService"
        APP_GROUP_ID: "group.com.jboth.mine"
        TEAM_ID: "866Y22894T"   # 可留空""；填写则强制覆盖 DEVELOPMENT_TEAM
        CI: "true"
      ios_signing:
        distribution_type: app_store        # 如需 Ad Hoc，将此处与下方 export_options 一起改为 ad_hoc/ad-hoc
        bundle_identifier: com.jboth.mine

    scripts:
      - name: Print tool versions
        script: |
          set -e
          xcodebuild -version
          ruby -v
          pod --version

      - name: Use Node 20 LTS
        script: |
          set -euo pipefail
          export NVM_DIR="$HOME/.nvm"
          if [ -s "$NVM_DIR/nvm.sh" ]; then
            . "$NVM_DIR/nvm.sh"
            nvm install 20
            nvm use 20
            echo 'export NVM_DIR="$HOME/.nvm"' >> $CM_ENV
            echo '. "$NVM_DIR/nvm.sh" && nvm use 20 >/dev/null' >> $CM_ENV
          else
            echo "nvm not found, fallback to Homebrew node@20"
            brew update || true
            brew install node@20 || true
            export PATH="/opt/homebrew/opt/node@20/bin:$PATH"
            echo 'export PATH="/opt/homebrew/opt/node@20/bin:$PATH"' >> $CM_ENV
          fi
          node -v
          npm -v || true
          yarn -v || true

      - name: Install JS deps (root)
        script: |
          set -e
          yarn install --frozen-lockfile || npm ci

      - name: Patch Podfile resolver (no heredoc)
        script: |
          set -euo pipefail
          PODFILE="ios/Podfile"
          if [ -f "$PODFILE" ]; then
            if grep -q "require Pod::Executable.execute_command('node', \['-p'" "$PODFILE"; then
              perl -0777 -i -pe "s/require Pod::Executable.execute_command\(\s*'node'.*?\)\s*\]/react_native_pods = Pod::Executable.execute_command(\n  'node',\n  [\n    '-p',\n    <<~'NODE',\n      require.resolve(\n        'react-native\/scripts\/react_native_pods.rb',\n        { paths: [process.argv[1]] },\n      )\n    NODE,\n    Pod::Config.instance.project_root.to_s\n  ]\n)\nrequire react_native_pods/s" "$PODFILE"
              echo "Patched Podfile resolver to use project_root"
            else
              echo "Podfile resolver already modernized or not matching; skip."
            fi
          else
            echo "Podfile not found at ios/Podfile"
          fi

      - name: Trim setup_signing.sh to skip early profile matching
        script: |
          set -euo pipefail
          test -f scripts/setup_signing.sh
          # 从出现“Resolving provisioning profiles”那一行开始到文件末尾删除（避免脚本过早查找 profiles）
          awk '/Resolving provisioning profiles/ {exit} {print}' \
            scripts/setup_signing.sh > scripts/setup_signing_trimmed.sh
          mv scripts/setup_signing_trimmed.sh scripts/setup_signing.sh
          chmod +x scripts/setup_signing.sh
          echo "----- AFTER TRIM (tail -n 10) -----"
          tail -n 10 scripts/setup_signing.sh || true

      - name: Run setup_signing.sh (from repo)
        script: |
          set -euo pipefail
          bash scripts/setup_signing.sh

      - name: Install pods
        script: |
          set -e
          cd ios
          pod repo update || true
          pod install --repo-update

      - name: Apply provisioning profiles to Xcode project
        script: |
          set -e
          # 这一步会把你在 Codemagic UI 上传/同步的 profiles 安装到 runner，并写入工程签名键
          xcode-project use-profiles --project ios/Mattermost.xcodeproj

      - name: Inspect installed provisioning profiles (verbose)
        script: |
          set -euo pipefail
          PDIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "==> Profiles in $PDIR"
          ls -l "$PDIR" || true
          shopt -s nullglob
          for f in "$PDIR"/*.mobileprovision "$PDIR"/*.provisionprofile; do
            echo "----- $f -----"
            /usr/bin/security cms -D -i "$f" > /tmp/p.plist || { echo "  failed to decode"; continue; }
            echo "Name:  $(/usr/bin/plutil -extract Name raw -o - /tmp/p.plist 2>/dev/null || true)"
            echo "UUID:  $(/usr/bin/plutil -extract UUID raw -o - /tmp/p.plist 2>/dev/null || true)"
            echo "AppID: $(/usr/bin/plutil -extract Entitlements.application-identifier raw -o - /tmp/p.plist 2>/dev/null || true)"
            echo -n "Has App Groups: "
            if /usr/libexec/PlistBuddy -c "Print :Entitlements:com.apple.security.application-groups" /tmp/p.plist >/dev/null 2>&1; then
              echo "yes"
            else
              echo "no"
            fi
            echo -n "aps-environment: "
            /usr/bin/plutil -extract Entitlements.aps-environment raw -o - /tmp/p.plist 2>/dev/null || echo "(none)"
          done

      - name: Run apply_profiles.sh (safe update only)
        script: |
          set -euo pipefail
          if [ ! -x scripts/apply_profiles.sh ]; then
            echo "scripts/apply_profiles.sh not found or not executable"
            exit 1
          fi
          bash scripts/apply_profiles.sh

      - name: Dump signing keys per target (Release + iphoneos)
        script: |
          set -e
          for T in Mattermost MattermostShare NotificationService; do
            echo "---- $T ----"
            xcodebuild -workspace ios/Mattermost.xcworkspace \
              -scheme Mattermost \
              -configuration Release \
              -sdk iphoneos \
              -showBuildSettings \
              | awk -v t="$T" '
                  /Build settings for action build and target/ {p = index($0, t)>0}
                  p && /(PRODUCT_BUNDLE_IDENTIFIER|CODE_SIGN_ENTITLEMENTS|DEVELOPMENT_TEAM|CODE_SIGN_STYLE|CODE_SIGN_IDENTITY(\[sdk=iphoneos\*\])?|PROVISIONING_PROFILE_SPECIFIER(\[sdk=iphoneos\*\])?|PROVISIONING_PROFILE(\[sdk=iphoneos\*\])?)/ {print}
                ' \
              | sed -E "s/^/$T: /" || true
          done

      - name: Generate export options (App Store)
        script: |
          set -e
          cat > export_options.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>destination</key><string>export</string>
            <key>compileBitcode</key><false/>
          </dict>
          </plist>
          EOF

      - name: Build archive
        script: |
          set -e
          cd ios
          xcodebuild -workspace Mattermost.xcworkspace \
            -scheme Mattermost \
            -configuration Release \
            -sdk iphoneos \
            -archivePath build/ios/xcarchive/Mattermost.xcarchive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="${TEAM_ID}" \
            COMPILER_INDEX_STORE_ENABLE=NO \
            archive | xcpretty && exit ${PIPESTATUS[0]}

      - name: Export IPA
        script: |
          set -e
          cd ios
          xcodebuild -exportArchive \
            -archivePath build/ios/xcarchive/Mattermost.xcarchive \
            -exportPath ipa \
            -exportOptionsPlist ../export_options.plist | xcpretty && exit ${PIPESTATUS[0]}

    artifacts:
      - ios/ipa/*.ipa
      - ios/build/**/*.xcarchive

    publishing:
      app_store_connect:
        api_key: "$APP_STORE_CONNECT_PRIVATE_KEY"
        key_id: "$APP_STORE_CONNECT_KEY_ID"
        issuer_id: "$APP_STORE_CONNECT_ISSUER_ID"
        submit_to_testflight: true
      email:
        recipients:
          - bill.fan4java@gmail.com
