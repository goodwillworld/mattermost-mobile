workflows:
  # ========= ANDROID：白标 + 生成 APK（自行分发），不发布到商店 =========
  mm-whitelabel-android-sideload:
    name: Mattermost WhiteLabel ANDROID (sideload)
    max_build_duration: 120
    instance_type: linux_x2
    environment:
      android_signing:
        - jboth_android_keystore_ref   # 在 Team settings → codemagic.yaml settings → Code signing identities 上传后得到的引用名
      groups:
        - mm_common                    # 通用变量组：REPLACE_ASSETS、APP_SCHEME、等
        - jboth_client                 # 客户变量组：APP_NAME、MAIN_APP_IDENTIFIER 等
      vars:
        BUILD_FOR_RELEASE: "true"
        ANDROID_BUILD_TASK: "assemble" # assemble=APK；bundle=AAB
        REPLACE_ASSETS: "true"
    cache:
      cache_paths:
        - $HOME/.gradle/caches
        - node_modules
    scripts:
      - name: Node 环境与依赖
        script: |
          set -e
          if [ -f ".nvmrc" ]; then . $HOME/.nvm/nvm.sh && nvm install && nvm use; fi
          npm ci

      - name: 注入签名（Gradle）
        script: |
          mkdir -p $HOME/.gradle
          cat >> $HOME/.gradle/gradle.properties <<EOF
          MATTERMOST_RELEASE_STORE_FILE=$CM_KEYSTORE_PATH
          MATTERMOST_RELEASE_KEY_ALIAS=$CM_KEY_ALIAS
          MATTERMOST_RELEASE_PASSWORD=$CM_KEY_PASSWORD
          EOF

      - name: 写入/兜底默认服务器配置（如仓库中已存在将不会覆盖）
        script: |
          set -e
          mkdir -p assets/override
          CFG=assets/override/config.json
          if [ ! -f "$CFG" ]; then
            cat > "$CFG" <<'JSON'
          {
            "DefaultServerUrl": "https://hello.jboth.com",
            "AutoSelectServerUrl": true
          }
          JSON
            echo "Created $CFG with default server URL."
          else
            echo "Found existing $CFG, keep your repo version."
          fi

      - name: 白标变量确认
        script: |
          echo "APP_NAME=$APP_NAME"
          echo "MAIN_APP_IDENTIFIER=$MAIN_APP_IDENTIFIER"
          echo "APP_SCHEME=$APP_SCHEME"

      - name: 构建（优先使用仓库自带 lane）
        script: |
          set -e
          npm run build:android || echo "lane 构建失败，尝试 Gradle 兜底…"

      - name: 兜底：直接 Gradle 生成 APK（如 lane 只产出 AAB）
        script: |
          set -e
          cd android
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file="$CM_KEYSTORE_PATH" \
            -Pandroid.injected.signing.store.password="$CM_KEY_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$CM_KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$CM_KEY_PASSWORD" || true
          cd -

      - name: 收集制品（APK/AAB）
        script: |
          mkdir -p $CM_ARTIFACTS
          find . -type f -name "*release*.apk" -maxdepth 6 -print -exec cp -f {} $CM_ARTIFACTS \; || true
          find . -type f -name "*.aab" -maxdepth 6 -print -exec cp -f {} $CM_ARTIFACTS \; || true
    # 不写 publishing：仅在 Artifacts 输出安装包

  # ========= iOS：白标 + TestFlight/App Store 分发（用 api_key_path 方案） =========
  mm-whitelabel-ios:
    name: Mattermost WhiteLabel iOS (TestFlight/App Store)
    max_build_duration: 120
    instance_type: mac_mini_m2

    # 可选：即使配置了 integrations，publishing 用的是 api_key_path，不冲突
    # integrations:
    #   app_store_connect: codemagic

    environment:
      groups:
        - mm_common
        - jboth_client
        - ios_match
      vars:
        BUILD_FOR_RELEASE: "true"
        REPLACE_ASSETS: "true"
        # 变量组里需提供：
        # APP_NAME、MAIN_APP_IDENTIFIER、
        # EXTENSION_APP_IDENTIFIER、NOTIFICATION_SERVICE_IDENTIFIER、
        # FASTLANE_TEAM_ID、IOS_APP_GROUP、IOS_ICLOUD_CONTAINER、
        # MATCH_USERNAME、MATCH_PASSWORD、MATCH_GIT_URL、MATCH_APP_IDENTIFIER、MATCH_TYPE=appstore、SYNC_PROVISIONING_PROFILES=true
        # 以及 ASC_KEY_ID、ASC_ISSUER_ID、ASC_PRIVATE_KEY（App 或 Team 级环境变量，设为 Secret）

    cache:
      cache_paths:
        - $HOME/Library/Caches/CocoaPods
        - ios/Pods
        - node_modules

    scripts:
      # 若你的 match 仓库是自建域名，可取消注释预热 known_hosts
      # - name: SSH known_hosts
      #   script: |
      #     mkdir -p ~/.ssh && ssh-keyscan your.git.host >> ~/.ssh/known_hosts

      - name: 环境与依赖（Node）
        script: |
          set -e

          echo "▶ Using system Node"
          which node || true
          node -v
          npm -v

          echo "▶ Install watchman (solidarity requires it)"
          if command -v brew >/dev/null 2>&1; then
            eval "$(/opt/homebrew/bin/brew shellenv)" || true
            brew list watchman >/dev/null 2>&1 || brew install watchman
            watchman --version || true
          else
            echo "❌ Homebrew 未找到，无法安装 watchman"
            exit 1
          fi

          echo "▶ Pin CocoaPods to 1.16.1 (user gem dir) and bypass Bundler"
          # 安装到用户目录，避免动系统 Ruby/Gems
          export GEM_HOME="$HOME/.gem"
          export GEM_PATH="$GEM_HOME"
          export PATH="$GEM_HOME/bin:$PATH"
          gem list -i cocoapods -v 1.16.1 || gem install cocoapods -v 1.16.1 --no-document

          # 彻底规避 Bundler 注入：清掉相关环境变量，再用 RubyGems 的“可执行版本”语法
          unset RUBYOPT BUNDLE_GEMFILE BUNDLE_BIN_PATH BUNDLE_PATH BUNDLER_ORIG_PATH BUNDLER_ORIG_MANPATH || true
          echo "pod path: $(command -v pod || echo 'not found')"
          env -i PATH="$PATH" GEM_HOME="$GEM_HOME" GEM_PATH="$GEM_PATH" HOME="$HOME" LANG="${LANG:-en_US.UTF-8}" pod _1.16.1_ --version

          echo "▶ npm ci"
          npm ci

      - name: Ruby/CocoaPods/Fastlane
        script: |
          gem install bundler --no-document
          bundle install
          cd ios && bundle exec pod install --repo-update && cd ..

      # —— 关键：在 match 之前配置 SSH，并自检访问证书库 ——
      - name: 配置 SSH 访问 match 证书库并自检在 match 之前配置 SSH，并自检访问证书库 
        script: |
          set -e
          [ -n "$MATCH_GIT_URL" ] || { echo "❌ 缺少 MATCH_GIT_URL"; exit 1; }
          echo "MATCH_GIT_URL=$MATCH_GIT_URL"

          mkdir -p ~/.ssh
          # 1) 还原私钥（用 printf + macOS 的 /usr/bin/base64 -D 更稳）
          if [ -z "$MATCH_SSH_PRIVATE_KEY_B64" ]; then
            echo "❌ 缺少 MATCH_SSH_PRIVATE_KEY_B64（请把“私钥”的 base64 放到这个变量）"; exit 1
          fi
          printf '%s' "$MATCH_SSH_PRIVATE_KEY_B64" | /usr/bin/base64 -D > ~/.ssh/match_key || {
            echo "❌ base64 解码失败，请确认是“私钥”的 base64（不是 .pub 公钥）"; exit 1;
          }
          chmod 600 ~/.ssh/match_key

          # 2) 头尾检查（必须是 OpenSSH 私钥头尾）
          HEAD_LINE="$(head -n1 ~/.ssh/match_key || true)"
          TAIL_LINE="$(tail -n1 ~/.ssh/match_key || true)"
          echo "Key head: $HEAD_LINE"
          echo "Key tail: $TAIL_LINE"
          if [ "$HEAD_LINE" != "-----BEGIN OPENSSH PRIVATE KEY-----" ] || [ "$TAIL_LINE" != "-----END OPENSSH PRIVATE KEY-----" ]; then
            echo "❌ 还原文件不是 OpenSSH 私钥，请重新生成/编码（见下步骤 3）"
            exit 1
          fi

          # 3) 用 ssh-keygen 验证私钥可读
          if ! ssh-keygen -yf ~/.ssh/match_key >/dev/null 2>&1; then
            echo "❌ ssh-keygen 无法读取私钥，格式仍异常。请按“步骤 3：重新生成 + 正确 base64”处理。"
            exit 1
          fi

          # 4) 预热 GitHub host key
          ssh-keyscan -t rsa,ecdsa,ed25519 github.com >> ~/.ssh/known_hosts 2>/dev/null || true

          # 5) 仅使用这把私钥
          export GIT_SSH_COMMAND='ssh -i ~/.ssh/match_key -o IdentitiesOnly=yes -o StrictHostKeyChecking=yes'

          # 6) 验证到 github.com 的 SSH 身份（出现欢迎提示即可）
          ssh -i ~/.ssh/match_key -o IdentitiesOnly=yes -o StrictHostKeyChecking=yes -T git@github.com || true

          # 7) 仓库自检
          git ls-remote "$MATCH_GIT_URL" >/dev/null
          echo "✅ match 证书库可访问"


      - name: 自检关键变量（不会泄露）
        script: |
          set -e
          check_var() { if [ -z "${!1}" ]; then echo "❌ MISSING $1"; exit 1; else echo "✅ $1 OK"; fi; }
          check_var FASTLANE_TEAM_ID
          check_var MATCH_USERNAME
          check_var MATCH_PASSWORD
          check_var MATCH_GIT_URL
          check_var MATCH_APP_IDENTIFIER
          check_var MATCH_TYPE
          check_var ASC_KEY_ID
          check_var ASC_ISSUER_ID
          if [ -z "$ASC_PRIVATE_KEY" ]; then echo "❌ MISSING ASC_PRIVATE_KEY"; exit 1; else echo "✅ ASC_PRIVATE_KEY OK (hidden)"; fi

      # - name: 生成 App Store Connect API Key JSON（供 publishing 使用）
      #   script: |
      #     set -e
      #     cat > asc_api_key.json <<EOF
      #     {
      #       "key_id": "${ASC_KEY_ID}",
      #       "issuer_id": "${ASC_ISSUER_ID}",
      #       "key": "${ASC_PRIVATE_KEY}",
      #       "in_house": false
      #     }
      #     EOF
      #     echo "✅ asc_api_key.json generated"

      - name: 构建 iOS（使用仓库 lane）
        script: |
          npm run build:ios

      - name: 收集制品
        script: |
          mkdir -p $CM_ARTIFACTS
          find . -type f -name "*.ipa" -maxdepth 6 -print -exec cp -f {} $CM_ARTIFACTS \; || true

    publishing:
      app_store_connect:
        api_key: |
          -----BEGIN PRIVATE KEY-----
          MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgTHFCUEmtmzuEaG/T
          zD5C5EBtEBsuWf54ZxCbWmpD/lugCgYIKoZIzj0DAQehRANCAAS6nYsA0zoFzGbY
          t9rYpOKdcq0hG8zmImfhjOct0m609Z/J4fOcoxeLd3LJr4DAo6Kk+PBeCFBvrxIl
          j5J7JvfX
          -----END PRIVATE KEY-----
        key_id: "UZ33M397NY"
        issuer_id: "26e601c9-c2f0-497a-a9e1-39a426cecf9a"
        submit_to_testflight: true

